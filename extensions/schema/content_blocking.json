// Copyright (c) 2019 Vivaldi Technologies AS. All rights reserved

[
  {
    "namespace": "contentBlocking",
    "compiler_options": {
      "implemented_in": "extensions/api/content_blocking/content_blocking_api.h"
    },
    "description": "Provides control over the Adblocking service and other implemented content blocking measures",
    "types": [
      {
        "id": "RuleGroup",
        "description": "Used to specify whether a specific operation should apply to tracking blocking or adblocking.",
        "type": "string",
        "enum": [ "tracking", "ad_blocking" ]
      },
      {
        "id": "ExceptionList",
        "description": "Used to inform whether the exception list used in a rule group is a list of exemptions or a list for which process is enabled",
        "type": "string",
        "enum": [ "process_list", "exempt_list" ]
      },
      {
        "id": "FetchResult",
        "description": "The result of a fetch operation on a rule source.",
        "type": "string",
        "enum": [
          {
            "name": "success",
            "description": "Fetch completed successfully."
          },
          {
            "name": "download_failed",
            "description": "For an online source, failed to download using the provided URL."
          },
          {
            "name": "file_not_found",
            "description": "For a local source, the file provided didn't seem to exist."
          },
          {
            "name": "file_read_error",
            "description": "For a local source, the file provided couldn't be read."
          },
          {
            "name": "file_unsupported",
            "description": "The rules file is of an invalid format or doesn't contain any valid rule."
          },
          {
            "name": "failed_saving_parsed_rules",
            "description": "The rules were fetched and compiled properly, but the result couldn't be saved to the profile."
          },
          {
            "name": "unknown",
            "description": "No fetching attempt has completed yet."
          }
        ]
      },
      {
        "id": "RulesInfo",
        "description": "Information about the rules themselves and more detailed parsing results",
        "type": "object",
        "properties": {
          "valid_rules": {
            "type": "integer",
            "description": "The number of entries in the file that resulted in a rule being compiled."
          },
          "unsupported_rules": {
            "type": "integer",
            "description": "The number of entries in the file that resolved to valid rules that either didn't make sense or are not supported at this time."
          },
          "invalid_rules": {
            "type": "integer",
            "description": "The number of entries in the file that resolved to valid rules that could not be parsed to a rule or were explicitly against the spec."
          }
        }
      },
      {
        "id": "AdBlockMetadata",
        "description": "Information extracted from the adblock file comments. If the user added a malicous source, these could be anything. Handle with care.",
        "type": "object",
        "properties": {
          "homepage": {
            "type": "string",
            "description": "URL pointing to the original website for this list."
          },
          "title": {
            "type": "string",
            "description": "List name."
          },
          "expires": {
            "type": "integer",
            "description": "How often the list is refreshed, in hours."
          },
          "license": {
            "type": "string",
            "description": "URL pointing to licensing info for the list."
          },
          "version": {
            "type": "integer",
            "description": "Version number of the list."
          }
        }
      },
      {
        "id": "RuleSourceSettings",
        "description": "Parameters used when parsing the rules list. Can only be modified when the source is disabled",
        "type": "object",
        "properties": {
          "allow_abp_snippets": {
            "description": "If false, any present abp snippet rules will be ignored.",
            "type": "boolean"
          },
          "naked_hostname_is_pure_host": {
            "description": "If true, any rule that looks like just a host name will be converted to match only the host part of the url.",
            "type": "boolean"
          },
          "use_whole_document_allow": {
            "description": "If true, any allow rule using the document type will cause all resources loaded by matching documents to be allowed (ABP beahvior).",
            "type": "boolean"
          }
        }
      },
      {
        "id": "RuleSource",
        "description": "Information about a loaded rule source, including its fetching status and metadata retrieved when extracting rules from it",
        "type": "object",
        "properties": {
          "source_url": {
            "description": "For an online source, this is the url that was provided when setting it up.",
            "type": "string"
          },
          "source_file":{
            "description": "For an local source, this is the file that was provided when setting it up.",
            "type": "string"
          },
          "is_from_url": {
            "description": "indicates whether the rule source is online or local, and which of the source_url and source_file fields is valid",
            "type": "boolean"
          },
          "settings": {
            "description": "See RuleSourceSettings.",
            "$ref": "RuleSourceSettings"
          },
          "id": {
            "type": "integer"
          },
          "rules_list_checksum": {
            "description": "Checksum of the compiled rule file derived from this source. This will be the empty string if the rule source has never been fetched succesfully.",
            "type": "string"
          },
          "unsafe_adblock_metadata": {
            "$ref": "AdBlockMetadata"
          },
          "last_update": {
            "description": "The last time the source was successfully fetched and the corresponding rules updated. Represented in milliseconds since the epoch.",
            "type": "number"
          },
          "next_fetch": {
            "description": "The next time a fetching and updating from the rule source will be attempted. Represented in milliseconds since the epoch.",
            "type": "number"
          },
          "is_fetching": {
            "description": "Whether fetching of the rule source is in progress",
            "type": "boolean"
          },
          "last_fetch_result": {
            "description": "The result of the last fetch attempt",
            "$ref": "FetchResult"
          },
          "rules_info": {
            "$ref": "RulesInfo"
          },
          "removable": {
            "type": "boolean"
          },
          "loaded": {
            "type": "boolean"
          }
        }
      },
      {
        "id": "BlockedCounter",
        "description": "How often requests relating to a domain were blocked",
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "blocked_count": {
            "type": "integer"
          }
        }
      },
      {
        "id": "BlockedUrlsInfo",
        "description": "Information about a blocked URL",
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "blocked_count": {
            "type": "integer"
          }
        }
      },
      {
        "id": "TrackerInfo",
        "description": "Information for a given tracker",
        "type": "object",
        "properties": {
          "source_id": {
            "description": "The id of the rule source from which this info was obtained.",
            "type": "integer"
          },
          "info": {
            "type": "any"
          }
        }
      },
      {
        "id": "BlockedTrackersInfo",
        "description": "Information about a blocked tracker",
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "blocked_urls": {
            "type": "array",
            "description": "blocked urls that belong to this tracker",
            "items": {
              "$ref": "BlockedUrlsInfo"
            }
          },
          "tracker_info": {
            "type": "array",
            "items": {
              "$ref": "TrackerInfo"
            }
          },
          "blocked_count": {
            "type": "integer"
          }
        }
      },
      {
        "id": "TabBlockedUrlsInfo",
        "description": "Information about urls that got blocked, per tab",
        "type": "object",
        "properties": {
          "tab_id": {
            "type": "integer"
          },
          "total_blocked_count": {
            "type": "integer"
          },
          "blocked_trackers_info": {
            "type": "array",
            "description": "blocked urls that belong to a known tracker, alongside with tracker information.",
            "items": {
              "$ref": "BlockedTrackersInfo"
            }
          },
          "blocked_urls_info": {
            "type": "array",
            "description": "blocked urls for which there is no tracker information.",
            "items": {
              "$ref": "BlockedUrlsInfo"
            }
          }
        }
      },
      {
        "id": "AdAttributionDomain",
        "description": "Information about which domain ad attribution is enabled for, if any, for a given tab",
        "type": "object",
        "properties": {
          "tab_id": {
            "type": "integer"
          },
          "domain": {
            "type": "string"
          },
          "active": {
            "description": "True if the tab is currently on the ad attribution domain, causing ad attribution to be enabled.",
            "type": "boolean"
          }
        }
      },
      {
        "id": "AllowedAdAttributionTrackers",
        "description": "Information about which trackers have been allowed for ad attribution, per tab",
        "type": "object",
        "properties": {
          "tab_id": {
            "type": "integer"
          },
          "tracker_urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "id": "URLPartnerInfo",
        "description": "Information about the URL given - Is it a partner? What name does it have?",
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "Name of the partner, or empty if unknown (in which case a generic message should be used)"
          }
        }
      }

    ],
    "functions": [
      {
        "name": "setRuleGroupEnabled",
        "type": "function",
        "description": "Changes whether a particular type of blocking is in effect.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "enabled",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "isRuleGroupEnabled",
        "type": "function",
        "description": "Checks whether a specific type of blocking is in effect.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean"
            }
          ]
        }
      },
      {
        "name": "addKnownSourceFromURL",
        "type": "function",
        "description": "Adds an online rule source. Newly added sources are automatically enabled.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "source_settings",
            "$ref": "RuleSourceSettings",
            "optional": true
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "source_id",
              "type": "integer"
            }
          ]
        }
      },
      {
        "name": "addKnownSourceFromFile",
        "type": "function",
        "description": "Adds an local rule source. Newly added sources are automatically enabled.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "file",
            "type": "string"
          },
          {
            "name": "source_settings",
            "$ref": "RuleSourceSettings",
            "optional": true
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "source_id",
              "type": "integer"
            }
          ]
        }
      },
      {
        "name": "setKnownSourceSettings",
        "type": "function",
        "description": "Changes the settings used when parsing the rules",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "source_id",
            "type": "integer"
          },
          {
            "name": "source_settings",
            "$ref": "RuleSourceSettings"
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "success",
              "type": "boolean"
            }
          ]
        }
      },
      {
        "name": "enableSource",
        "type": "function",
        "description": "Enables and loads a known rule source",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "source_id",
            "type": "integer"
          }
        ]
      },
      {
        "name": "disableSource",
        "type": "function",
        "description": "Disables and unloads a known rule source",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "source_id",
            "type": "integer"
          }
        ]
      },
      {
        "name": "fetchSourceNow",
        "type": "function",
        "description": "Forces fetching of a loaded rule source. Does nothing if a fetch is already in progress",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "source_id",
            "type": "integer"
          }
        ]
      },
      {
        "name": "deleteKnownSource",
        "type": "function",
        "description": "Remove a known rule source. The source will be disabled before removal.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "source_id",
            "type": "integer"
          }
        ]
      },
      {
        "name": "resetPresetSources",
        "type": "function",
        "description": "Re-adds all preset sources that were removed by the user.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ]
      },
      {
        "name": "getRuleSource",
        "type": "function",
        "description": "Gets detailed information about a known rule source",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "source_id",
            "type": "integer"
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "rule_source",
              "$ref": "RuleSource"
            }
          ]
        }
      },
      {
        "name": "getRuleSources",
        "type": "function",
        "description": "Gets detailed information about all known rule sources. Loaded sources will have extra information.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "rule_sources",
              "type": "array",
              "items": {
                "$ref": "RuleSource"
              }
            }
          ]
        }
      },
      {
        "name": "setActiveExceptionsList",
        "type": "function",
        "description": "Sets whether a rule group should use a list of exempted domains or a list of domains to which it applies.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "state",
            "$ref": "ExceptionList"
          }
        ]
      },
      {
        "name": "getActiveExceptionsList",
        "type": "function",
        "description": "Checks whether a rule group is using a list of exempted domains or a list of domains to which it applies",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "state",
              "$ref": "ExceptionList"
            }
          ]
        }
      },
      {
        "name": "addExceptionForDomain",
        "type": "function",
        "description":"Adds an item to the exception list",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "exception_list",
            "$ref": "ExceptionList"
          },
          {
            "name": "domain",
            "type": "string"
          }
        ]
      },
      {
        "name": "removeExceptionForDomain",
        "type": "function",
        "description":"Removes an item from the exception list",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "exception_list",
            "$ref": "ExceptionList"
          },
          {
            "name": "domain",
            "type": "string"
          }
        ]
      },
      {
        "name": "removeAllExceptions",
        "type": "function",
        "description":"Removes all domains from the exception list",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "exception_list",
            "$ref": "ExceptionList"
          }
        ]
      },
      {
        "name": "getExceptions",
        "type": "function",
        "description":"Retrieves all domains from the exeption list",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "exception_list",
            "$ref": "ExceptionList"
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "origins",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      },
      {
        "name": "getAllExceptionLists",
        "type": "function",
        "description":"Retrieves all the exception lists",
        "parameters": [],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "origins",
              "type": "object",
              "properties": {
                "tracking": {
                  "type": "object",
                  "properties": {
                    "process_list": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "exempt_list": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "ad_blocking": {
                  "type": "object",
                  "properties": {
                    "process_list": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "exempt_list": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      {
        "name": "getBlockedUrlsInfo",
        "type": "function",
        "description": "Retrieves information about which URLs have been blocked from loading in a given tab",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "tab_ids",
            "type": "array",
            "description": "A list of tabs for which to retrieve blocked urls information.",
            "items": {
              "type": "integer"
            }
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "blocked_urls_info_for_tab",
              "type": "array",
              "items": {
                "$ref": "TabBlockedUrlsInfo"
              }
            }
          ]
        }
      },
      {
        "name": "getBlockedCounters",
        "type": "function",
        "description": "Retrieves the amount of requests blocked since the last time the counters got reset.",
        "parameters": [],
        "returns_async": {
          "name": "callback",
          "does_not_support_promises": "vivaldi",
          "parameters": [
            {
              "name": "reporting_start",
              "type": "number",
              "description": "The time at which the counters have been initialized or reset."
            },
            {
              "name": "counters",
              "type": "object",
              "properties": {
                "blocked_domains": {
                  "type": "object",
                  "properties": {
                    "tracking": {
                      "type": "array",
                      "items": {
                        "$ref": "BlockedCounter"
                      }
                    },
                    "ad_blocking": {
                      "type": "array",
                      "items": {
                        "$ref": "BlockedCounter"
                      }
                    }
                  }
                },
                "blocked_for_origin": {
                  "type": "object",
                  "properties": {
                    "tracking": {
                      "type": "array",
                      "items": {
                        "$ref": "BlockedCounter"
                      }
                    },
                    "ad_blocking": {
                      "type": "array",
                      "items": {
                        "$ref": "BlockedCounter"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      {
        "name": "clearBlockedCounters",
        "type": "function",
        "description": "Resets the counters used for getBlockedCounters",
        "parameters": []
      },
      {
        "name": "isExemptOfFiltering",
        "type": "function",
        "description": "Returns whether a page URL will be exempt from filtering by a given rule group, based on the active exception list.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "url",
            "type": "string"
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "exempt",
              "type": "boolean"
            }
          ]
        }
      },
      {
        "name": "isExemptByPartnerURL",
        "type": "function",
        "description": "Returns whether a page URL will be exempt from filtering by a partnership exception.",
        "parameters": [
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "tab_id",
            "type": "integer"
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "status",
              "$ref": "URLPartnerInfo"
            }
          ]
        }
      },
      {
        "name": "getAdAttributionDomain",
        "description": "Gets the eTLD+1 for which ad attribution is currently active on the given tabs, if any.",
        "type": "function",
        "parameters": [
          {
            "name": "tab_ids",
            "type": "array",
            "description": "A list of tabs for which to retrieve the ad attribution stats.",
            "items": {
              "type": "integer"
            }
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "result",
              "type": "array",
              "items": {
                "$ref": "AdAttributionDomain"
              }
            }
          ]
        }
      },
      {
        "name": "getAdAttributionAllowedTrackers",
        "description": "Gets the allowed ad attribution trackers for the given tabs, if any.",
        "type": "function",
        "parameters": [
          {
            "name": "tab_ids",
            "type": "array",
            "description": "A list of tabs for which to retrieve allowed ad attribution trackers.",
            "items": {
              "type": "integer"
            }
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "tracker_urls",
              "type": "array",
              "items": {
                "$ref": "AllowedAdAttributionTrackers"
              }
            }
          ]
        }
      }
    ],
    "events": [
      {
        "name": "onRuleSourceAdded",
        "type": "function",
        "description": "Fired when a known rule source has been added",
        "parameters": [
          {
            "name" : "rule_source",
            "$ref": "RuleSource"
          },
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ]
      },
      {
        "name": "onRuleSourceUpdated",
        "type": "function",
        "description": "The properties of a rule source have been updated, either because a fetch started or completed.",
        "parameters": [
          {
            "name" : "rule_source",
            "$ref": "RuleSource"
          },
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ]
      },
      {
        "name": "onRuleSourceEnabled",
        "type": "function",
        "description": "Fired when a known rule source has been enabled",
        "parameters": [
          {
            "name": "source_id",
            "type": "integer"
          },
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ]
      },
      {
        "name": "onRuleSourceDisabled",
        "type": "function",
        "description": "Fired when a known rule source has been disabled",
        "parameters": [
          {
            "name": "source_id",
            "type": "integer"
          },
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ]
      },
      {
        "name": "onRuleSourceRemoved",
        "type": "function",
        "description": "Fired when a known rule source has been removed",
        "parameters": [
          {
            "name": "source_id",
            "type": "integer"
          },
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ]
      },
      {
        "name": "onStateChanged",
        "type": "function",
        "description": "Fired when a group has been enabled/disabled or when an exception state has changed.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          }
        ]
      },
      {
        "name": "onExceptionsChanged",
        "type": "function",
        "description": "Fired when the list of exceptions has changed.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "exception_list",
            "$ref": "ExceptionList"
          }
        ]
      },
      {
        "name": "onUrlsBlocked",
        "type": "function",
        "description": "Fired when urls have been blocked by either the ad-blocker or the tracker-blocker. This is fired at most once per second.",
        "parameters": [
          {
            "name": "rule_group",
            "$ref": "RuleGroup"
          },
          {
            "name": "tab_ids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        ]
      },
      {
        "name": "onAdAttributionDomainChanged",
        "type": "function",
        "description": "Fires when the eTLD+s on which ad attribution is active changes or if the tab is navigated away from that domain.",
        "parameters": [
          {
            "name": "tab_id",
            "type": "integer"
          }
        ]
      },
      {
        "name": "onAdAttributionTrackersAllowed",
        "type": "function",
        "description": "Fired when trackers have been allowed on some tabs, as a result of ad attribution.",
        "parameters": [
          {
            "name": "tab_ids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        ]
      }
    ]
  }
]
