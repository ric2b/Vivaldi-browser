// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `securegcm.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:securegcm.GcmMetadata)
pub struct GcmMetadata {
    // message fields
    // @@protoc_insertion_point(field:securegcm.GcmMetadata.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<Type>>,
    // @@protoc_insertion_point(field:securegcm.GcmMetadata.version)
    pub version: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:securegcm.GcmMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GcmMetadata {
    fn default() -> &'a GcmMetadata {
        <GcmMetadata as ::protobuf::Message>::default_instance()
    }
}

impl GcmMetadata {
    pub fn new() -> GcmMetadata {
        ::std::default::Default::default()
    }

    // required .securegcm.Type type = 1;

    pub fn type_(&self) -> Type {
        match self.type_ {
            Some(e) => e.enum_value_or(Type::ENROLLMENT),
            None => Type::ENROLLMENT,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: Type) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 version = 2;

    pub fn version(&self) -> i32 {
        self.version.unwrap_or(0i32)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for GcmMetadata {
    const NAME: &'static str = "GcmMetadata";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.version = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.version {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GcmMetadata {
        GcmMetadata::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GcmMetadata {
        static instance: GcmMetadata = GcmMetadata {
            type_: ::std::option::Option::None,
            version: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:securegcm.Type)
pub enum Type {
    // @@protoc_insertion_point(enum_value:securegcm.Type.ENROLLMENT)
    ENROLLMENT = 0,
    // @@protoc_insertion_point(enum_value:securegcm.Type.TICKLE)
    TICKLE = 1,
    // @@protoc_insertion_point(enum_value:securegcm.Type.TX_REQUEST)
    TX_REQUEST = 2,
    // @@protoc_insertion_point(enum_value:securegcm.Type.TX_REPLY)
    TX_REPLY = 3,
    // @@protoc_insertion_point(enum_value:securegcm.Type.TX_SYNC_REQUEST)
    TX_SYNC_REQUEST = 4,
    // @@protoc_insertion_point(enum_value:securegcm.Type.TX_SYNC_RESPONSE)
    TX_SYNC_RESPONSE = 5,
    // @@protoc_insertion_point(enum_value:securegcm.Type.TX_PING)
    TX_PING = 6,
    // @@protoc_insertion_point(enum_value:securegcm.Type.DEVICE_INFO_UPDATE)
    DEVICE_INFO_UPDATE = 7,
    // @@protoc_insertion_point(enum_value:securegcm.Type.TX_CANCEL_REQUEST)
    TX_CANCEL_REQUEST = 8,
    // @@protoc_insertion_point(enum_value:securegcm.Type.PROXIMITYAUTH_PAIRING)
    PROXIMITYAUTH_PAIRING = 10,
    // @@protoc_insertion_point(enum_value:securegcm.Type.GCMV1_IDENTITY_ASSERTION)
    GCMV1_IDENTITY_ASSERTION = 11,
    // @@protoc_insertion_point(enum_value:securegcm.Type.DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD)
    DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD = 12,
    // @@protoc_insertion_point(enum_value:securegcm.Type.DEVICE_TO_DEVICE_MESSAGE)
    DEVICE_TO_DEVICE_MESSAGE = 13,
    // @@protoc_insertion_point(enum_value:securegcm.Type.DEVICE_PROXIMITY_CALLBACK)
    DEVICE_PROXIMITY_CALLBACK = 14,
    // @@protoc_insertion_point(enum_value:securegcm.Type.UNLOCK_KEY_SIGNED_CHALLENGE)
    UNLOCK_KEY_SIGNED_CHALLENGE = 15,
    // @@protoc_insertion_point(enum_value:securegcm.Type.LOGIN_NOTIFICATION)
    LOGIN_NOTIFICATION = 101,
}

impl ::protobuf::Enum for Type {
    const NAME: &'static str = "Type";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Type> {
        match value {
            0 => ::std::option::Option::Some(Type::ENROLLMENT),
            1 => ::std::option::Option::Some(Type::TICKLE),
            2 => ::std::option::Option::Some(Type::TX_REQUEST),
            3 => ::std::option::Option::Some(Type::TX_REPLY),
            4 => ::std::option::Option::Some(Type::TX_SYNC_REQUEST),
            5 => ::std::option::Option::Some(Type::TX_SYNC_RESPONSE),
            6 => ::std::option::Option::Some(Type::TX_PING),
            7 => ::std::option::Option::Some(Type::DEVICE_INFO_UPDATE),
            8 => ::std::option::Option::Some(Type::TX_CANCEL_REQUEST),
            10 => ::std::option::Option::Some(Type::PROXIMITYAUTH_PAIRING),
            11 => ::std::option::Option::Some(Type::GCMV1_IDENTITY_ASSERTION),
            12 => ::std::option::Option::Some(Type::DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD),
            13 => ::std::option::Option::Some(Type::DEVICE_TO_DEVICE_MESSAGE),
            14 => ::std::option::Option::Some(Type::DEVICE_PROXIMITY_CALLBACK),
            15 => ::std::option::Option::Some(Type::UNLOCK_KEY_SIGNED_CHALLENGE),
            101 => ::std::option::Option::Some(Type::LOGIN_NOTIFICATION),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Type] = &[
        Type::ENROLLMENT,
        Type::TICKLE,
        Type::TX_REQUEST,
        Type::TX_REPLY,
        Type::TX_SYNC_REQUEST,
        Type::TX_SYNC_RESPONSE,
        Type::TX_PING,
        Type::DEVICE_INFO_UPDATE,
        Type::TX_CANCEL_REQUEST,
        Type::PROXIMITYAUTH_PAIRING,
        Type::GCMV1_IDENTITY_ASSERTION,
        Type::DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD,
        Type::DEVICE_TO_DEVICE_MESSAGE,
        Type::DEVICE_PROXIMITY_CALLBACK,
        Type::UNLOCK_KEY_SIGNED_CHALLENGE,
        Type::LOGIN_NOTIFICATION,
    ];
}

impl ::std::default::Default for Type {
    fn default() -> Self {
        Type::ENROLLMENT
    }
}

