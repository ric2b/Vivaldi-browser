import { CodeFixAction, CompletionEntryDetails, CompletionInfo, DefinitionInfoAndBoundSpan, Diagnostic, JsxClosingTagInfo, LanguageService, OutliningSpan, QuickInfo, RenameInfo, RenameLocation, SignatureHelpItems, TextChange, UserPreferences } from "typescript";
import { LitPluginContext } from "./lit-plugin-context.js";
export declare class TsLitPlugin {
    private prevLangService;
    readonly context: LitPluginContext;
    private litAnalyzer;
    private get program();
    constructor(prevLangService: LanguageService, context: LitPluginContext);
    getCompletionEntryDetails(...args: Parameters<LanguageService["getCompletionEntryDetails"]>): CompletionEntryDetails | undefined;
    getCompletionsAtPosition(...args: Parameters<LanguageService["getCompletionsAtPosition"]>): CompletionInfo | undefined;
    getSemanticDiagnostics(...args: Parameters<LanguageService["getSemanticDiagnostics"]>): Diagnostic[];
    getDefinitionAndBoundSpan(...args: Parameters<LanguageService["getDefinitionAndBoundSpan"]>): DefinitionInfoAndBoundSpan | undefined;
    getCodeFixesAtPosition(...args: Parameters<LanguageService["getCodeFixesAtPosition"]>): readonly CodeFixAction[];
    getQuickInfoAtPosition(...args: Parameters<LanguageService["getQuickInfoAtPosition"]>): QuickInfo | undefined;
    getOutliningSpans(...args: Parameters<LanguageService["getOutliningSpans"]>): OutliningSpan[];
    getJsxClosingTagAtPosition(...args: Parameters<LanguageService["getJsxClosingTagAtPosition"]>): JsxClosingTagInfo | undefined;
    getSignatureHelpItems(...args: Parameters<LanguageService["getSignatureHelpItems"]>): SignatureHelpItems | undefined;
    /** @deprecated Pass `providePrefixAndSuffixTextForRename` as part of a `UserPreferences` parameter. */
    findRenameLocations(fileName: string, position: number, findInStrings: boolean, findInComments: boolean, providePrefixAndSuffixTextForRename?: boolean): readonly RenameLocation[] | undefined;
    findRenameLocations(fileName: string, position: number, findInStrings: boolean, findInComments: boolean, preferences: UserPreferences): readonly RenameLocation[] | undefined;
    getRenameInfo(...args: Parameters<LanguageService["getRenameInfo"]>): RenameInfo;
    getFormattingEditsForRange(...args: Parameters<LanguageService["getFormattingEditsForRange"]>): TextChange[];
}
//# sourceMappingURL=ts-lit-plugin.d.ts.map