"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.Logger = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
var fs_1 = require("fs");
var lit_analyzer_1 = require("lit-analyzer");
var path_1 = require("path");
var util_1 = require("util");
var tsServer = __importStar(require("typescript/lib/tsserverlibrary.js"));
var LOG_FILE_NAME = "lit-plugin.log";
/**
 * This class takes care of logging while fixing issues regarding the type script service logger.
 * It logs to a file called "log.txt" in the root of this project.
 */
var Logger = /** @class */ (function (_super) {
    __extends(Logger, _super);
    function Logger() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.level = lit_analyzer_1.LitAnalyzerLoggerLevel.OFF;
        _this.tsLogger = undefined;
        _this.logPath = (0, path_1.join)(process.cwd(), LOG_FILE_NAME);
        return _this;
    }
    /**
     * Call this with the TS Server's logger so that we can log to the TS server logs.
     *
     * Access in VS Code via > TypeScript: Open TS Server log
     */
    Logger.prototype.setTsServerLogging = function (tsLogger) {
        this.tsLogger = tsLogger;
    };
    /**
     * Logs if this.level >= DEBUG
     * @param args
     */
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.appendLogWithLevel.apply(this, __spreadArray([lit_analyzer_1.LitAnalyzerLoggerLevel.DEBUG], __read(args), false));
    };
    /**
     * Logs if this.level >= ERROR
     * @param args
     */
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.appendLogWithLevel.apply(this, __spreadArray([lit_analyzer_1.LitAnalyzerLoggerLevel.ERROR], __read(args), false));
    };
    /**
     * Logs if level >= WARN
     * @param args
     */
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.appendLogWithLevel.apply(this, __spreadArray([lit_analyzer_1.LitAnalyzerLoggerLevel.WARN], __read(args), false));
    };
    /**
     * Logs if level >= VERBOSE
     * @param args
     */
    Logger.prototype.verbose = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.appendLogWithLevel.apply(this, __spreadArray([lit_analyzer_1.LitAnalyzerLoggerLevel.VERBOSE], __read(args), false));
    };
    Object.defineProperty(Logger.prototype, "cwd", {
        set: function (cwd) {
            this.logPath = (0, path_1.join)(cwd, LOG_FILE_NAME);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Resets the log file.
     */
    Logger.prototype.resetLogs = function () {
        if (this.level > lit_analyzer_1.LitAnalyzerLoggerLevel.OFF) {
            (0, fs_1.writeFileSync)(this.logPath, "");
        }
    };
    /**
     * Appends a log if this.level > level
     * @param level
     * @param args
     */
    Logger.prototype.appendLogWithLevel = function (level) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.level >= level) {
            var prefix = this.getLogLevelPrefix(level);
            var message = (0, util_1.inspect)(args, {
                colors: true,
                depth: 6,
                breakLength: 50,
                maxArrayLength: 10
            });
            try {
                (0, fs_1.appendFileSync)(this.logPath, "".concat(prefix).concat(message, "\n"));
            }
            catch (_b) {
                // ignore
            }
            (_a = this.tsLogger) === null || _a === void 0 ? void 0 : _a.msg("[ts-lit-plugin] ".concat(message), level === lit_analyzer_1.LitAnalyzerLoggerLevel.ERROR ? tsServer.server.Msg.Err : tsServer.server.Msg.Info);
        }
    };
    Logger.prototype.getLogLevelPrefix = function (level) {
        return "[".concat(new Date().toLocaleString(), "] [").concat(this.severityPrefix(level), "] ");
    };
    return Logger;
}(lit_analyzer_1.DefaultLitAnalyzerLogger));
exports.Logger = Logger;
exports.logger = new Logger();
