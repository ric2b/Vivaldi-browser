{"version":3,"file":"decode-uri-component.cjs","sources":["../src/decode-uri-component.ts"],"sourcesContent":["const token = '%[a-f0-9]{2}';\nconst singleMatcher = new RegExp(`(${token})|([^%]+?)`, 'gi');\nconst multiMatcher = new RegExp(`(${token})+`, 'gi');\n\nfunction decodeComponents(components: RegExpMatchArray | [], split?: number): string[] {\n  let splitAt = split;\n\n  try {\n    // Try to decode the entire string first\n    return [decodeURIComponent(components.join(''))];\n  } catch {\n    // Do nothing\n  }\n\n  if (components.length === 1) {\n    return components;\n  }\n\n  splitAt = splitAt ?? 1;\n\n  // Split the array in 2 parts\n  const left = components.slice(0, splitAt) as RegExpMatchArray;\n  const right = components.slice(splitAt) as RegExpMatchArray;\n\n  return Array.prototype.concat.call(\n    [],\n    decodeComponents(left),\n    decodeComponents(right),\n  ) as string[];\n}\n\nfunction decode(input: string): string {\n  let localInput = input;\n\n  try {\n    return decodeURIComponent(localInput);\n  } catch {\n    let tokens = RegExp(singleMatcher).exec(localInput) || [];\n\n    for (let i = 1; i < tokens.length; i++) {\n      localInput = decodeComponents(tokens, i).join('');\n\n      tokens = RegExp(singleMatcher).exec(localInput) || [];\n    }\n\n    return localInput;\n  }\n}\n\nfunction customDecodeURIComponent(input: string): string {\n  let localInput = input;\n\n  // Keep track of all the replacements and prefill the map with the `BOM`\n  const replaceMap: Record<string, string> = {\n    '%FE%FF': '\\uFFFD\\uFFFD',\n    '%FF%FE': '\\uFFFD\\uFFFD',\n  };\n\n  let match = multiMatcher.exec(localInput);\n  while (match) {\n    try {\n      // Decode as big chunks as possible\n      replaceMap[match[0]] = decodeURIComponent(match[0]);\n    } catch {\n      const result = decode(match[0]);\n\n      if (result !== match[0]) {\n        replaceMap[match[0]] = result;\n      }\n    }\n\n    match = multiMatcher.exec(localInput);\n  }\n\n  // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n  replaceMap['%C2'] = '\\uFFFD';\n\n  const entries = Object.keys(replaceMap);\n\n  for (const key of entries) {\n    // Replace all decoded components\n    localInput = localInput.replace(new RegExp(key, 'g'), replaceMap[key]);\n  }\n\n  return localInput;\n}\n\nexport default function decodeUriComponent(encodedURI: string): string {\n  if (typeof encodedURI !== 'string') {\n    throw new TypeError(\n      `Expected \\`encodedURI\\` to be of type \\`string\\`, got \\`${typeof encodedURI}\\``,\n    );\n  }\n\n  try {\n    // Try the built in decoder first\n    return decodeURIComponent(encodedURI);\n  } catch {\n    // Fallback to a more advanced decoder\n    return customDecodeURIComponent(encodedURI);\n  }\n}\n"],"names":["token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","splitAt","decodeURIComponent","join","length","left","slice","right","Array","prototype","concat","call","decode","input","localInput","tokens","exec","i","customDecodeURIComponent","replaceMap","match","result","entries","Object","keys","key","replace","decodeUriComponent","encodedURI","TypeError"],"mappings":"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"}