
--- a/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/ElementwiseOpToLLVM.cpp	2024-09-25 10:13:59.000000000 -0700
+++ b/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/ElementwiseOpToLLVM.cpp	2024-10-07 00:38:03.000000000 -0700
@@ -264,7 +264,8 @@
        outVecWidthBits](Location loc, ConversionPatternRewriter &rewriter,
                         const SmallVector<Value> &v) -> SmallVector<Value> {
     int numElements = v.size();
-    assert(numElements == 4 || numElements == 2 && "invalid vector size");
+    assert(numElements == 8 || numElements == 4 ||
+           numElements == 2 && "invalid vector size");
 
     auto ctx = rewriter.getContext();
     int inBitwidth = inType.getIntOrFloatBitWidth();
@@ -669,6 +670,115 @@
                               PatternBenefit benefit = patternBenefitDefault)
       : ElementwiseOpConversionBase(typeConverter, axisAnalysisPass, benefit),
         computeCapability(computeCapability) {}
+
+  LogicalResult matchAndRewrite(
+      arith::SIToFPOp op, OpAdaptor adaptor,
+      ConversionPatternRewriter &rewriter) const override {
+    if (succeeded(matchAndRewriteInt4ToBf16Conversion(op, rewriter))) {
+      return success();
+    }
+    return Base::matchAndRewrite(op, adaptor, rewriter);
+  }
+
+  // Matches subgraph of convert 8xi4 to 8xbf16 and rewrites it to inline PTX.
+  LogicalResult matchAndRewriteInt4ToBf16Conversion(
+      arith::SIToFPOp op, ConversionPatternRewriter &rewriter) const {
+    if (computeCapability < 90) return failure();
+    Type inElemTy = getElementType(op.getIn());
+    Type outElemTy = getElementType(op.getOut());
+    if (!inElemTy.isInteger(8) || !outElemTy.isBF16()) return failure();
+    FailureOr<Value> unpack = matchInt4Unpack(op.getIn());
+    if (failed(unpack)) return failure();
+
+    Location loc = op.getLoc();
+    Value src = rewriter.getRemappedValue(unpack.value());
+    auto structTy = dyn_cast<LLVM::LLVMStructType>(src.getType());
+    if (!structTy || structTy.getBody().size() % 4 != 0) return failure();
+    auto isInt8 = [](Type type) { return type.isInteger(8); };
+    if (!all_of(structTy.getBody(), isInt8)) return failure();
+
+    const LLVMTypeConverter *typeConverter = getTypeConverter();
+    assert(inElemTy == typeConverter->convertType(inElemTy));
+    assert(outElemTy == typeConverter->convertType(outElemTy));
+
+    const std::string S4_to_Bf16_sm90 = R"({
+      .reg .b32 r<4>, mi, mf;
+      mov.b32 mi, 0x43404340 - 0x00080008;
+      mov.b32 mf, 0x43404340;
+      // Shift 4-bit inputs to 16-bit boundary.
+      shr.u32 r1, $4, 4;
+      shr.u32 r2, $4, 8;
+      shr.u32 r3, $4, 12;
+      // Sign-extend from 4 bits is equivalent to (x ^ 0x8) - 0x8.
+      lop3.b32 r0, $4, 0x000f000f, 0x00080008, (0xf0 & 0xcc) ^ 0xaa;
+      lop3.b32 r1, r1, 0x000f000f, 0x00080008, (0xf0 & 0xcc) ^ 0xaa;
+      lop3.b32 r2, r2, 0x000f000f, 0x00080008, (0xf0 & 0xcc) ^ 0xaa;
+      lop3.b32 r3, r3, 0x000f000f, 0x00080008, (0xf0 & 0xcc) ^ 0xaa;
+      // Interger-add magic number (minus bias from sign-extend above).
+      add.s16x2 r0, r0, mi;
+      add.s16x2 r1, r1, mi;
+      add.s16x2 r2, r2, mi;
+      add.s16x2 r3, r3, mi;
+      // Float-subtract magic number.
+      sub.bf16x2 r0, r0, mf;
+      sub.bf16x2 r1, r1, mf;
+      sub.bf16x2 r2, r2, mf;
+      sub.bf16x2 r3, r3, mf;
+      // Shuffle results into correct order.
+      prmt.b32 $0, r1, r0, 0x5410;
+      prmt.b32 $1, r3, r2, 0x5410;
+      prmt.b32 $2, r1, r0, 0x7632;
+      prmt.b32 $3, r3, r2, 0x7632;
+    })";
+
+    SmallVector<Value> resultVals;
+    SmallVector<Value> unpackedVals = unpackLLElements(loc, src, rewriter);
+    auto cvtFunc = makeConverterFromPtx(S4_to_Bf16_sm90, inElemTy, outElemTy);
+    for (ValueRange operands = unpackedVals; !operands.empty();
+         operands = operands.drop_front(4)) {
+      SmallVector<Value> inVals = {
+          operands[0], operands[1], operands[2], operands[3],
+          // Repeat operands so that cvtFunc produces 8 outputs.
+          operands[0], operands[1], operands[2], operands[3]};
+      auto outVals = cvtFunc(loc, rewriter, inVals);
+      assert(inVals.size() == outVals.size());
+      resultVals.append(outVals.begin(), outVals.end());
+    }
+
+    resultVals = reorderValues(resultVals, op.getIn().getType(), op.getType());
+    resultVals = maybeDeduplicate(op, resultVals);
+    Value view =
+        packLLElements(loc, typeConverter, resultVals, rewriter, op.getType());
+    rewriter.replaceOp(op, view);
+
+    return success();
+  }
+
+  // Returns the source if value is the result of an 2xi4 -> 2xi8 unpack
+  // sequence.
+  static FailureOr<Value> matchInt4Unpack(Value value) {
+    auto reshape = value.getDefiningOp<ReshapeOp>();
+    if (!reshape) return failure();
+    auto join = reshape.getSrc().getDefiningOp<JoinOp>();
+    if (!join) return failure();
+    auto shrHi = join.getLhs().getDefiningOp<arith::ShRSIOp>();
+    if (!shrHi || !isConst4(shrHi.getRhs())) return failure();
+    auto shrLo = join.getRhs().getDefiningOp<arith::ShRSIOp>();
+    if (!shrLo || !isConst4(shrLo.getRhs())) return failure();
+    auto shlLo = shrLo.getLhs().getDefiningOp<arith::ShLIOp>();
+    if (!shlLo || !isConst4(shlLo.getRhs())) return failure();
+    if (shrHi.getLhs() != shlLo.getLhs()) return failure();
+    return shrHi.getLhs();
+  }
+
+  // Returns true if the value is equal to 4.
+  static bool isConst4(Value v) {
+    auto constOp = v.getDefiningOp<arith::ConstantOp>();
+    if (!constOp) return false;
+    auto attr = mlir::dyn_cast<DenseIntOrFPElementsAttr>(constOp.getValue());
+    if (!attr || !attr.isSplat()) return false;
+    return attr.getSplatValue<APInt>().getLimitedValue() == 4;
+  };
 
   SmallVector<Value> createDestOps(arith::SIToFPOp op, OpAdaptor adaptor,
                                    ConversionPatternRewriter &rewriter,
