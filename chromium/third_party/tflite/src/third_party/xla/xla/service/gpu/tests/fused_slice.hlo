// RUN: hlo-opt %s --xla_gpu_mlir_emitter_level=0 --platform=gpu --stage=llvm-before-optimizations --xla_gpu_target_config_filename=%S/../../../tools/hlo_opt/gpu_specs/%{GPU}.txtpb | FileCheck --check-prefixes=CHECK,CHECK-%{PTX} %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL: entry:
// CHECK-PTX:     %[[VAL_0:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x
// CHECK-GCN:     %[[VAL_0:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK-PTX:     %[[VAL_1:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_1:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK-PTX:     %[[VAL_2:.*]] = mul nuw nsw i32 %[[VAL_0]], 128
// CHECK-GCN:     %[[VAL_2:.*]] = mul nuw nsw i32 %[[VAL_0]], 256
// CHECK:         %[[VAL_3:.*]] = add nuw nsw i32 %[[VAL_2]], %[[VAL_1]]
// CHECK:         %[[VAL_4:.*]] = icmp ult i32 %[[VAL_3]], 2048
// CHECK:         call void @llvm.assume(i1 %[[VAL_4]])
// CHECK:         %[[VAL_5:.*]] = add nuw nsw i32 %[[VAL_3]], 0
// CHECK:         %[[VAL_6:.*]] = udiv i32 %[[VAL_5]], 1
// CHECK:         %[[VAL_7:.*]] = icmp ult i32 %[[VAL_3]], 2047
// CHECK:         br i1 %[[VAL_7]], label %[[VAL_8:.*]], label %[[VAL_9:.*]]
// CHECK:       fusion.in_bounds-after:                           ; preds = %[[VAL_10:.*]], %[[VAL_11:.*]]
// CHECK:         ret void
// CHECK:       fusion.in_bounds-true:                            ; preds = %[[VAL_11]]
// CHECK:         br label %[[VAL_12:.*]]
// CHECK:       concat_index_from_operand_id0:                    ; preds = %[[VAL_13:.*]]
// CHECK:         %[[VAL_14:.*]] = phi i32 [ 0, %[[VAL_13]] ]
// CHECK:         %[[VAL_15:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_14]]
// CHECK:         %[[VAL_16:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_17:.*]], i32 0, i32 %[[VAL_15]]
// CHECK:         %[[VAL_18:.*]] = load half, ptr %[[VAL_16]], align 2, !invariant.load
// CHECK:         %[[VAL_19:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_20:.*]], i32 0, i32 %[[VAL_15]]
// CHECK:         %[[VAL_21:.*]] = load half, ptr %[[VAL_19]], align 2, !invariant.load
// CHECK:         %[[VAL_22:.*]] = fmul half %[[VAL_18]], %[[VAL_21]]
// CHECK:         br label %[[VAL_23:.*]]
// CHECK:       concat_index_from_operand_id1:                    ; preds = %[[VAL_24:.*]]
// CHECK:         %[[VAL_25:.*]] = phi i32 [ 1024, %[[VAL_24]] ]
// CHECK:         %[[VAL_26:.*]] = sub nsw i32 %[[VAL_6]], %[[VAL_25]]
// CHECK:         %[[VAL_27:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_28:.*]], i32 0, i32 %[[VAL_26]]
// CHECK:         %[[VAL_29:.*]] = load half, ptr %[[VAL_27]], align 2, !invariant.load
// CHECK:         %[[VAL_30:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_31:.*]], i32 0, i32 %[[VAL_26]]
// CHECK:         %[[VAL_32:.*]] = load half, ptr %[[VAL_30]], align 2, !invariant.load
// CHECK:         %[[VAL_33:.*]] = fadd half %[[VAL_29]], %[[VAL_32]]
// CHECK:         br label %[[VAL_23]]
// CHECK:       concatenate.pivot.1024.:                          ; preds = %[[VAL_8]]
// CHECK:         %[[VAL_34:.*]] = icmp ult i32 %[[VAL_6]], 1024
// CHECK:         br i1 %[[VAL_34]], label %[[VAL_13]], label %[[VAL_24]]
// CHECK:       concatenate.pivot.0.:                             ; preds = %[[VAL_12]]
// CHECK:         br label %[[VAL_35:.*]]
// CHECK:       concatenate.pivot.1024.1:                         ; preds = %[[VAL_12]]
// CHECK:         br label %[[VAL_36:.*]]
// CHECK:       concat.1.merge:                                   ; preds = %[[VAL_36]], %[[VAL_35]]
// CHECK:         %[[VAL_37:.*]] = phi half [ %[[VAL_22]], %[[VAL_35]] ], [ %[[VAL_33]], %[[VAL_36]] ]
// CHECK:         %[[VAL_38:.*]] = icmp sge i32 %[[VAL_6]], 0
// CHECK:         %[[VAL_39:.*]] = icmp slt i32 %[[VAL_6]], 1024
// CHECK:         %[[VAL_40:.*]] = and i1 %[[VAL_38]], %[[VAL_39]]
// CHECK:         br i1 %[[VAL_40]], label %[[VAL_41:.*]], label %[[VAL_42:.*]]
// CHECK:       slice0-after:                                     ; preds = %[[VAL_41]], %[[VAL_23]]
// CHECK:         %[[VAL_43:.*]] = icmp sge i32 %[[VAL_6]], 1024
// CHECK:         %[[VAL_44:.*]] = icmp slt i32 %[[VAL_6]], 2047
// CHECK:         %[[VAL_45:.*]] = and i1 %[[VAL_43]], %[[VAL_44]]
// CHECK:         br i1 %[[VAL_45]], label %[[VAL_46:.*]], label %[[VAL_47:.*]]
// CHECK:       slice1-after:                                     ; preds = %[[VAL_46]], %[[VAL_42]]
// CHECK:         %[[VAL_48:.*]] = icmp sge i32 %[[VAL_6]], 2047
// CHECK:         %[[VAL_49:.*]] = icmp slt i32 %[[VAL_6]], 2047
// CHECK:         %[[VAL_50:.*]] = and i1 %[[VAL_48]], %[[VAL_49]]
// CHECK:         br i1 %[[VAL_50]], label %[[VAL_51:.*]], label %[[VAL_10]]
// CHECK:       slice2-after:                                     ; preds = %[[VAL_51]], %[[VAL_47]]
// CHECK:         br label %[[VAL_9]]
// CHECK:       slice0-true:                                      ; preds = %[[VAL_23]]
// CHECK:         %[[VAL_52:.*]] = sub i32 %[[VAL_6]], 0
// CHECK:         %[[VAL_53:.*]] = getelementptr inbounds [1024 x half], ptr %[[VAL_54:.*]], i32 0, i32 %[[VAL_52]]
// CHECK:         store half %[[VAL_37]], ptr %[[VAL_53]], align 2
// CHECK:         br label %[[VAL_42]]
// CHECK:       slice1-true:                                      ; preds = %[[VAL_42]]
// CHECK:         %[[VAL_55:.*]] = sub i32 %[[VAL_6]], 1024
// CHECK:         %[[VAL_56:.*]] = getelementptr inbounds [1023 x half], ptr %[[VAL_57:.*]], i32 0, i32 %[[VAL_55]]
// CHECK:         store half %[[VAL_37]], ptr %[[VAL_56]], align 2
// CHECK:         br label %[[VAL_47]]
// CHECK:       slice2-true:                                      ; preds = %[[VAL_47]]
// CHECK:         %[[VAL_58:.*]] = sub i32 %[[VAL_6]], 2047
// CHECK:         %[[VAL_59:.*]] = getelementptr inbounds [0 x half], ptr %[[VAL_60:.*]], i32 0, i32 %[[VAL_58]]
// CHECK:         store half %[[VAL_37]], ptr %[[VAL_59]], align 2
// CHECK:         br label %[[VAL_10]]

HloModule input_fusion_with_a_tuple_of_slices, is_scheduled=true

fused_computation {
  arg.1 = f16[1024]{0} parameter(0)
  arg.2 = f16[1024]{0} parameter(1)
  arg.3 = f16[1023]{0} parameter(2)
  arg.4 = f16[1023]{0} parameter(3)
  mul.1 = f16[1024]{0} multiply(arg.1, arg.2)
  add.1 = f16[1023]{0} add(arg.3, arg.4)
  concat.1 = f16[2047]{0} concatenate(mul.1, add.1), dimensions={0}
  slice.1 = f16[1024]{0} slice(concat.1), slice={[0:1024]}
  slice.2 = f16[1023]{0} slice(concat.1), slice={[1024:2047]}
  slice.3 = f16[0]{0} slice(concat.1), slice={[2047:2047]}
  ROOT tuple.1 = (f16[1024]{0}, f16[1023]{0}, f16[0]{0})
      tuple(slice.1, slice.2, slice.3)
}

ENTRY kernel_entry {
  arg.1 = f16[1024]{0} parameter(0)
  arg.2 = f16[1024]{0} parameter(1)
  arg.3 = f16[1023]{0} parameter(2)
  arg.4 = f16[1023]{0} parameter(3)
  ROOT fusion = (f16[1024]{0}, f16[1023]{0}, f16[0]{0})
      fusion(arg.1, arg.2, arg.3, arg.4), kind=kInput, calls=fused_computation
}
