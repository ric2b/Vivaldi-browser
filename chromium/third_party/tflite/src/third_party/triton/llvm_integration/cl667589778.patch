--- a/include/triton/Analysis/Alias.h	2023-10-19 13:35:54.000000000 -0700
+++ b/include/triton/Analysis/Alias.h	2024-08-26 08:31:25.000000000 -0700
@@ -85,10 +85,9 @@
   }
 
   /// Computes if the alloc set of the results are changed.
-  void
-  visitOperation(Operation *op,
-                 ArrayRef<const dataflow::Lattice<AliasInfo> *> operands,
-                 ArrayRef<dataflow::Lattice<AliasInfo> *> results) override;
+  LogicalResult visitOperation(
+      Operation *op, ArrayRef<const dataflow::Lattice<AliasInfo> *> operands,
+      ArrayRef<dataflow::Lattice<AliasInfo> *> results) override;
 };
 
 } // namespace mlir

--- a/lib/Analysis/Alias.cpp	2024-06-07 05:28:31.000000000 -0700
+++ b/lib/Analysis/Alias.cpp	2024-08-26 08:31:25.000000000 -0700
@@ -21,7 +21,7 @@
   return ret;
 }
 
-void SharedMemoryAliasAnalysis::visitOperation(
+LogicalResult SharedMemoryAliasAnalysis::visitOperation(
     Operation *op, ArrayRef<const dataflow::Lattice<AliasInfo> *> operands,
     ArrayRef<dataflow::Lattice<AliasInfo> *> results) {
   AliasInfo aliasInfo;
@@ -31,7 +31,7 @@
   if (auto memdescTy = dyn_cast<triton::MemDescType>(result.getType())) {
     if (!isa_and_nonnull<triton::gpu::SharedMemorySpaceAttr>(
             memdescTy.getMemorySpace()))
-      return;
+      return mlir::success();
   }
 
   // Only LocalAllocOp creates a new buffer.
@@ -49,11 +49,13 @@
   }
 
   if (pessimistic) {
-    return setAllToEntryStates(results);
+    setAllToEntryStates(results);
+    return mlir::success();
   }
   // Join all lattice elements
   for (auto *result : results)
     propagateIfChanged(result, result->join(aliasInfo));
+  return mlir::success();
 }
 
 AliasResult SharedMemoryAliasAnalysis::alias(Value lhs, Value rhs) {

--- a/lib/Analysis/AxisInfo.cpp	2024-07-03 07:14:55.000000000 -0700
+++ b/lib/Analysis/AxisInfo.cpp	2024-08-26 08:31:25.000000000 -0700
@@ -195,9 +195,9 @@
       dataflow::Lattice<AxisInfo>>::getLatticeElement;
   using FuncAxisInfoMapT = DenseMap<FunctionOpInterface, AxisInfo>;
 
-  void visitOperation(Operation *op,
-                      ArrayRef<const dataflow::Lattice<AxisInfo> *> operands,
-                      ArrayRef<dataflow::Lattice<AxisInfo> *> results) override;
+  LogicalResult visitOperation(
+      Operation *op, ArrayRef<const dataflow::Lattice<AxisInfo> *> operands,
+      ArrayRef<dataflow::Lattice<AxisInfo> *> results) override;
   void
   visitForOpInductionVar(scf::ForOp op,
                          ArrayRef<dataflow::Lattice<AxisInfo> *> argLattices);
@@ -1039,7 +1039,7 @@
   visitors.append<LoadOpAxisInfoVisitor>();
 }
 
-void AxisInfoAnalysis::visitOperation(
+LogicalResult AxisInfoAnalysis::visitOperation(
     Operation *op, ArrayRef<const dataflow::Lattice<AxisInfo> *> operands,
     ArrayRef<dataflow::Lattice<AxisInfo> *> results) {
   // TODO: For sure not the right way to do this
@@ -1048,8 +1048,10 @@
     if (op->getValue().getRank() == 0)
       setToEntryState((dataflow::Lattice<AxisInfo> *)op);
   AxisInfo curr = visitors.apply(op, operands);
-  if (curr.getRank() == 0)
-    return setAllToEntryStates(results);
+  if (curr.getRank() == 0) {
+    setAllToEntryStates(results);
+    return mlir::success();
+  }
   // override with hint
   auto newContiguity = curr.getContiguity();
   auto newDivisibility = curr.getDivisibility();
@@ -1071,6 +1073,7 @@
   // join all lattice elements
   for (auto *result : results)
     propagateIfChanged(result, result->join(curr));
+  return mlir::success();
 }
 
 void AxisInfoAnalysis::visitForOpInductionVar(
