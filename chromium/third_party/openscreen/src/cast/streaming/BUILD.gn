# Copyright 2019 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build_overrides/build.gni")
import("//third_party/libprotobuf-mutator/fuzzable_proto_library.gni")
import("//third_party/protobuf/proto_library.gni")
import("../../gni/openscreen.gni")
import("../../testing/libfuzzer/fuzzer_test.gni")

# TODO(crbug.com/1378386): Update Chromium tests to not include private headers
# noted by FIXME below.

visibility = [ "./*" ]

fuzzable_proto_library("remoting_proto") {
  # Used in //components/cast_streaming in Chromium.
  visibility += [ "*" ]
  sources = [ "remoting.proto" ]
}

fuzzable_proto_library("sender_stats_proto") {
  visibility += [ "*" ]  # Used by Android.
  sources = [ "sender_stats.proto" ]
}

openscreen_source_set("streaming_configs") {
  # Used in //components/cast_streaming in Chromium.
  visibility += [ "*" ]
  public = [
    "capture_configs.h",
    "constants.h",
    "message_fields.h",
    "resolution.h",
  ]
  sources = [
    "constants.cc",
    "message_fields.cc",
    "resolution.cc",
  ]

  public_deps = [
    "../../third_party/abseil",
    "../../third_party/jsoncpp",
  ]

  deps = [
    "../../platform:base",
    "../../util",
  ]
}

openscreen_source_set("common") {
  # Used by multiple targets in Chromium.
  visibility += [ "*" ]
  public = [
    "answer_messages.h",
    "capture_recommendations.h",
    "encoded_frame.h",
    "environment.h",
    "frame_id.h",
    "offer_messages.h",
    "receiver_message.h",
    "rpc_messenger.h",
    "rtp_time.h",
    "sender_message.h",  # FIXME: Remove Chromium #include and make private
    "session_messenger.h",
    "ssrc.h",  # FIXME: Remove Chromium #include and make private
  ]
  sources = [
    "answer_messages.cc",
    "capture_recommendations.cc",
    "clock_drift_smoother.cc",
    "clock_drift_smoother.h",
    "encoded_frame.cc",
    "environment.cc",
    "expanded_value_base.h",
    "frame_crypto.cc",
    "frame_crypto.h",
    "frame_id.cc",
    "ntp_time.cc",
    "ntp_time.h",
    "offer_messages.cc",
    "packet_util.cc",
    "packet_util.h",
    "receiver_message.cc",
    "rpc_messenger.cc",
    "rtcp_common.cc",
    "rtcp_common.h",
    "rtcp_session.cc",
    "rtcp_session.h",
    "rtp_defines.cc",
    "rtp_defines.h",
    "rtp_time.cc",
    "sender_message.cc",
    "session_config.cc",
    "session_config.h",
    "session_messenger.cc",
    "ssrc.cc",
    "statistics_collector.cc",
    "statistics_collector.h",
    "statistics_defines.cc",
    "statistics_defines.h",
  ]

  public_deps = [
    ":remoting_proto",
    ":streaming_configs",
    "../../third_party/abseil",
    "../../third_party/boringssl",
    "../common:channel",
    "../common:public",
    "../common/certificate/proto:certificate_proto",
  ]

  deps = [
    "../../platform",
    "../../util",
  ]

  if (!build_with_chromium) {
    deps += [ "../protocol:castv2" ]
  }

  friend = [
    ":unittests",
    ":sender",
    ":receiver",
    ":compound_rtcp_parser_fuzzer",
  ]
}

openscreen_source_set("receiver") {
  # Used by //components/cast_streaming and //chromecast/cast_core/browser in
  # Chromium.
  visibility += [ "*" ]
  public = [
    "receiver.h",
    "receiver_constraints.h",
    "receiver_session.h",
  ]
  sources = [
    "compound_rtcp_builder.cc",
    "compound_rtcp_builder.h",
    "frame_collector.cc",
    "frame_collector.h",
    "packet_receive_stats_tracker.cc",
    "packet_receive_stats_tracker.h",
    "receiver.cc",
    "receiver_base.cc",
    "receiver_base.h",
    "receiver_constraints.cc",
    "receiver_packet_router.cc",
    "receiver_packet_router.h",
    "receiver_session.cc",
    "rtp_packet_parser.cc",
    "rtp_packet_parser.h",
    "sender_report_parser.cc",
    "sender_report_parser.h",
  ]

  public_deps = [ ":common" ]

  deps = [ "../../util" ]

  friend = [
    ":unittests",
    ":rtp_packet_parser_fuzzer",
    ":sender_report_parser_fuzzer",
  ]
}

openscreen_source_set("sender") {
  # Used by //components/mirroring and //media/cast in Chromium.
  visibility += [ "*" ]
  public = [
    "remoting_capabilities.h",  # FIXME: Only for Chromium tests.
    "sender.h",
    "sender_packet_router.h",  # FIXME: Only for Chromium tests.
    "sender_session.h",
    "statistics.h",
  ]
  sources = [
    "bandwidth_estimator.cc",
    "bandwidth_estimator.h",
    "clock_offset_estimator.h",
    "clock_offset_estimator_impl.cc",
    "clock_offset_estimator_impl.h",
    "compound_rtcp_parser.cc",
    "compound_rtcp_parser.h",
    "rtp_packetizer.cc",
    "rtp_packetizer.h",
    "sender.cc",
    "sender_packet_router.cc",
    "sender_report_builder.cc",
    "sender_report_builder.h",
    "sender_session.cc",
    "statistics.cc",
    "statistics_analyzer.cc",
    "statistics_analyzer.h",
  ]

  public_deps = [ ":common" ]

  deps = [ "../../util" ]

  friend = [
    ":unittests",
    ":compound_rtcp_parser_fuzzer",
  ]
}

openscreen_source_set("test_helpers") {
  testonly = true
  public = []
  sources = [
    "testing/message_pipe.h",
    "testing/simple_message_port.h",
    "testing/simple_socket_subscriber.h",
  ]

  public_deps = [ ":common" ]

  deps = [
    "../../third_party/googletest:gmock",
    "../../third_party/googletest:gtest",
    "../../util",
    "../common:public",
  ]

  friend = [ ":unittests" ]
}

openscreen_source_set("unittests") {
  testonly = true
  visibility += [ "../..:openscreen_unittests_all" ]
  public = []
  sources = [
    "answer_messages_unittest.cc",
    "bandwidth_estimator_unittest.cc",
    "capture_recommendations_unittest.cc",
    "clock_offset_estimator_impl_unittest.cc",
    "compound_rtcp_builder_unittest.cc",
    "compound_rtcp_parser_unittest.cc",
    "expanded_value_base_unittest.cc",
    "frame_collector_unittest.cc",
    "frame_crypto_unittest.cc",
    "message_fields_unittest.cc",
    "mock_compound_rtcp_parser_client.h",
    "mock_environment.cc",
    "mock_environment.h",
    "ntp_time_unittest.cc",
    "offer_messages_unittest.cc",
    "packet_receive_stats_tracker_unittest.cc",
    "packet_util_unittest.cc",
    "receiver_constraints_unittest.cc",
    "receiver_message_unittest.cc",
    "receiver_session_unittest.cc",
    "receiver_unittest.cc",
    "rpc_messenger_unittest.cc",
    "rtcp_common_unittest.cc",
    "rtp_packet_parser_unittest.cc",
    "rtp_packetizer_unittest.cc",
    "rtp_time_unittest.cc",
    "sender_packet_router_unittest.cc",
    "sender_report_unittest.cc",
    "sender_session_unittest.cc",
    "sender_unittest.cc",
    "session_messenger_unittest.cc",
    "ssrc_unittest.cc",
    "statistics_analyzer_unittest.cc",
    "statistics_collector_unittest.cc",
    "statistics_unittest.cc",
  ]

  deps = [
    ":receiver",
    ":sender",
    ":test_helpers",
    "../../platform:test",
    "../../third_party/googletest:gmock",
    "../../third_party/googletest:gtest",
    "../../util",
  ]
  friend = [
    ":sender",
    ":receiver",
  ]
}

openscreen_fuzzer_test("compound_rtcp_parser_fuzzer") {
  public = []
  sources = [ "compound_rtcp_parser_fuzzer.cc" ]

  deps = [
    ":sender",
    "../../third_party/abseil",
  ]

  seed_corpus = "compound_rtcp_parser_fuzzer_seeds"

  # Note: 1500 is approx. kMaxRtpPacketSize in rtp_defines.h.
  libfuzzer_options = [ "max_len=1500" ]
}

openscreen_fuzzer_test("rtp_packet_parser_fuzzer") {
  public = []
  sources = [ "rtp_packet_parser_fuzzer.cc" ]

  deps = [
    ":receiver",
    "../../third_party/abseil",
  ]

  seed_corpus = "rtp_packet_parser_fuzzer_seeds"

  # Note: 1500 is approx. kMaxRtpPacketSize in rtp_defines.h.
  libfuzzer_options = [ "max_len=1500" ]
}

openscreen_fuzzer_test("sender_report_parser_fuzzer") {
  public = []
  sources = [ "sender_report_parser_fuzzer.cc" ]

  deps = [
    ":receiver",
    "../../third_party/abseil",
  ]

  seed_corpus = "sender_report_parser_fuzzer_seeds"

  # Note: 1500 is approx. kMaxRtpPacketSize in rtp_defines.h.
  libfuzzer_options = [ "max_len=1500" ]
}
