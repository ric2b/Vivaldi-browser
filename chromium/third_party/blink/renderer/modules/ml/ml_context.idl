// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This will be a shared interface by two APIs:
// - The Model Loader API,
//     https://github.com/webmachinelearning/model-loader/blob/main/explainer.md
// - The WebNN API,
//     https://github.com/webmachinelearning/webnn/blob/main/explainer.md
// We follow WebNN spec's definition,
//   - https://webmachinelearning.github.io/webnn/#api-mlcontext
// In the future, this interface may be extended when WebNN is implemented so
// a dictionary may be insufficient.

typedef record<DOMString, ArrayBufferView> MLNamedArrayBufferViews;

dictionary MLComputeResult {
  MLNamedArrayBufferViews inputs;
  MLNamedArrayBufferViews outputs;
};

dictionary MLContextLostInfo {
  DOMString message;
};

dictionary MLSupportLimits {
  sequence<DOMString> dataTypes;
};

dictionary MLArgMinMaxSupportLimits {
  MLSupportLimits input;
  MLSupportLimits output;
};

dictionary MLConcatSupportLimits {
  MLSupportLimits inputs;
};

dictionary MLGatherSupportLimits {
  MLSupportLimits input;
  MLSupportLimits indices;
};

dictionary MLWhereSupportLimits {
  MLSupportLimits condition;
  MLSupportLimits trueValue;
  MLSupportLimits falseValue;
};

dictionary MLOpSupportLimits {
  MLSupportLimits input;
  MLSupportLimits constant;
  MLSupportLimits output;

  MLArgMinMaxSupportLimits argMin;
  MLArgMinMaxSupportLimits argMax;
  MLConcatSupportLimits concat;
  MLGatherSupportLimits gather;
  MLWhereSupportLimits where;
};

typedef record<DOMString, MLBuffer> MLNamedBuffers;

[
  RuntimeEnabled=MachineLearningNeuralNetwork,
  SecureContext,
  Exposed=(Window, DedicatedWorker)
] interface MLContext {
  [
    RuntimeEnabled=MachineLearningNeuralNetwork,
    CallWith=ScriptState
  ] readonly attribute Promise<MLContextLostInfo> lost;

  [
    RuntimeEnabled=MachineLearningNeuralNetwork,
    CallWith=ScriptState,
    RaisesException,
    Measure
  ] Promise<MLComputeResult> compute(
      MLGraph graph, MLNamedArrayBufferViews inputs, MLNamedArrayBufferViews outputs);

  [
    RuntimeEnabled=MachineLearningNeuralNetwork,
    CallWith=ScriptState,
    RaisesException
  ] MLBuffer createBuffer(MLBufferDescriptor descriptor);

  // TODO(crbug.com/328105506): enable partial MLBuffer reads/writes.
  // TODO(crbug.com/40278771): consider moving arguments into a dictonary 
  // per W3C recommendations:
  // https://w3ctag.github.io/design-principles/#prefer-dictionaries
  [
    RuntimeEnabled=MachineLearningNeuralNetwork,
    CallWith=ScriptState,
    RaisesException
  ] void writeBuffer(
        MLBuffer dstBuffer,
        [AllowShared] ArrayBufferView srcData,
        optional MLSize64 srcElementOffset = 0,
        optional MLSize64 srcElementSize);

  [
    RuntimeEnabled=MachineLearningNeuralNetwork,
    CallWith=ScriptState,
    RaisesException
  ] void writeBuffer(
        MLBuffer dstBuffer,
        ArrayBuffer srcData,
        optional MLSize64 srcByteOffset = 0,
        optional MLSize64 srcByteSize);

  // TODO(crbug.com/328102504): enable transferable view to avoid copy.
  [
    RuntimeEnabled=MachineLearningNeuralNetwork,
    CallWith=ScriptState,
    RaisesException
  ] Promise<ArrayBuffer> readBuffer(
        MLBuffer srcBuffer);

  // TODO(crbug.com/1273291): enable partial buffer dispatches.
  [
    RuntimeEnabled=MachineLearningNeuralNetwork,
    CallWith=ScriptState,
    RaisesException,
    Measure
  ] void dispatch(
      MLGraph graph, MLNamedBuffers inputs, MLNamedBuffers outputs);
  [
    RuntimeEnabled=MachineLearningNeuralNetwork,
    CallWith=ScriptState
  ] MLOpSupportLimits opSupportLimits();
};
