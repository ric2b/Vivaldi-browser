From 017605670f601081b78c411e310eae4d2f2745f7 Mon Sep 17 00:00:00 2001
From: Andrew Grieve <agrieve@google.com>
Date: Mon, 22 Jul 2024 10:58:24 -0400
Subject: [PATCH] Add com.android.tools.r8.runtimeMinApiLevel for finer control
 of Library minApi vs Runtime minApi

Besides creating more optimal code, needed to enable Optional backports.

Bug: 335208733
---
 src/main/java/com/android/tools/r8/D8.java    |  2 +-
 .../r8/androidapi/AndroidApiLevelCompute.java |  6 +-
 .../AndroidApiReferenceLevelCache.java        |  2 +-
 .../r8/androidapi/ApiReferenceStubber.java    |  2 +-
 .../r8/androidapi/AvailableApiExceptions.java |  4 +-
 .../ir/desugar/BackportedMethodRewriter.java  | 34 +++----
 .../api/InstanceInitializerOutliner.java      |  2 +-
 .../shaking/ProguardConfigurationUtils.java   |  2 +-
 .../tools/r8/utils/AndroidApiLevelUtils.java  |  7 +-
 .../tools/r8/utils/InternalOptions.java       | 96 ++++++++++++++-----
 10 files changed, 103 insertions(+), 54 deletions(-)

diff --git a/src/main/java/com/android/tools/r8/D8.java b/src/main/java/com/android/tools/r8/D8.java
index 55a819904b..b45b799686 100644
--- a/src/main/java/com/android/tools/r8/D8.java
+++ b/src/main/java/com/android/tools/r8/D8.java
@@ -364,7 +364,7 @@ public final class D8 {
           .meetAssumeValue(
               dexItemFactory.androidOsBuildVersionMembers.SDK_INT,
               abstractValueFactory.createNumberFromIntervalValue(
-                  options.getMinApiLevel().getLevel(), Integer.MAX_VALUE))
+                  options.getLibraryMinApiLevel().getLevel(), Integer.MAX_VALUE))
           .setIsSideEffectFree(dexItemFactory.androidOsBuildVersionMembers.SDK_INT);
     }
     appView.setAssumeInfoCollection(assumeInfoCollectionBuilder.build());
diff --git a/src/main/java/com/android/tools/r8/androidapi/AndroidApiLevelCompute.java b/src/main/java/com/android/tools/r8/androidapi/AndroidApiLevelCompute.java
index bca00e0090..e8a74a188e 100644
--- a/src/main/java/com/android/tools/r8/androidapi/AndroidApiLevelCompute.java
+++ b/src/main/java/com/android/tools/r8/androidapi/AndroidApiLevelCompute.java
@@ -76,10 +76,10 @@ public abstract class AndroidApiLevelCompute {
   }
 
   public ComputedApiLevel computeInitialMinApiLevel(InternalOptions options) {
-    if (options.getMinApiLevel() == AndroidApiLevel.MAIN) {
+    if (options.getLibraryMinApiLevel() == AndroidApiLevel.MAIN) {
       return ComputedApiLevel.main();
     }
-    return new KnownApiLevel(options.getMinApiLevel());
+    return new KnownApiLevel(options.getLibraryMinApiLevel());
   }
 
   public static class NoAndroidApiLevelCompute extends AndroidApiLevelCompute {
@@ -121,7 +121,7 @@ public abstract class AndroidApiLevelCompute {
 
     public DefaultAndroidApiLevelCompute(AppView<?> appView) {
       this.cache = AndroidApiReferenceLevelCache.create(appView, this);
-      this.minApiLevel = of(appView.options().getMinApiLevel());
+      this.minApiLevel = of(appView.options().getLibraryMinApiLevel());
       this.diagnosticsHandler = appView.reporter();
     }
 
diff --git a/src/main/java/com/android/tools/r8/androidapi/AndroidApiReferenceLevelCache.java b/src/main/java/com/android/tools/r8/androidapi/AndroidApiReferenceLevelCache.java
index fc51eb08d7..211ee49e6c 100644
--- a/src/main/java/com/android/tools/r8/androidapi/AndroidApiReferenceLevelCache.java
+++ b/src/main/java/com/android/tools/r8/androidapi/AndroidApiReferenceLevelCache.java
@@ -127,6 +127,6 @@ public class AndroidApiReferenceLevelCache {
       }
       return unknownValue;
     }
-    return apiLevelCompute.of(foundApiLevel.max(appView.options().getMinApiLevel()));
+    return apiLevelCompute.of(foundApiLevel.max(appView.options().getLibraryMinApiLevel()));
   }
 }
diff --git a/src/main/java/com/android/tools/r8/androidapi/ApiReferenceStubber.java b/src/main/java/com/android/tools/r8/androidapi/ApiReferenceStubber.java
index f663fd49f5..1f3492bcaf 100644
--- a/src/main/java/com/android/tools/r8/androidapi/ApiReferenceStubber.java
+++ b/src/main/java/com/android/tools/r8/androidapi/ApiReferenceStubber.java
@@ -127,7 +127,7 @@ public class ApiReferenceStubber {
     // types of existing program classes. See b/258270051 and b/259076765 for more information.
     // Also, for L devices we can have verification issues if there are super invokes to missing
     // members on stubbed classes. See b/279780940 for more information.
-    if (appView.options().getMinApiLevel().isGreaterThan(AndroidApiLevel.L)) {
+    if (appView.options().getLibraryMinApiLevel().isGreaterThan(AndroidApiLevel.L)) {
       clazz
           .allImmediateSupertypes()
           .forEach(superType -> findReferencedLibraryClasses(superType, clazz));
diff --git a/src/main/java/com/android/tools/r8/androidapi/AvailableApiExceptions.java b/src/main/java/com/android/tools/r8/androidapi/AvailableApiExceptions.java
index 0525b8f8cd..6cb8bccde7 100644
--- a/src/main/java/com/android/tools/r8/androidapi/AvailableApiExceptions.java
+++ b/src/main/java/com/android/tools/r8/androidapi/AvailableApiExceptions.java
@@ -26,8 +26,8 @@ public class AvailableApiExceptions {
   private final Set<DexType> exceptions;
 
   public AvailableApiExceptions(InternalOptions options) {
-    assert options.getMinApiLevel().isLessThan(AndroidApiLevel.L);
-    exceptions = build(options.itemFactory, options.getMinApiLevel());
+    assert options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.L);
+    exceptions = build(options.itemFactory, options.getLibraryMinApiLevel());
   }
 
   public boolean canCauseVerificationError(DexType type) {
diff --git a/src/main/java/com/android/tools/r8/ir/desugar/BackportedMethodRewriter.java b/src/main/java/com/android/tools/r8/ir/desugar/BackportedMethodRewriter.java
index e24701c098..a626035040 100644
--- a/src/main/java/com/android/tools/r8/ir/desugar/BackportedMethodRewriter.java
+++ b/src/main/java/com/android/tools/r8/ir/desugar/BackportedMethodRewriter.java
@@ -206,7 +206,7 @@ public final class BackportedMethodRewriter implements CfInstructionDesugaring {
                     provider.method,
                     context.getOrigin(),
                     MethodPosition.create(context),
-                    appView.options().getMinApiLevel().getLevel()));
+                    appView.options().getLibraryMinApiLevel().getLevel()));
       }
       return null;
     }
@@ -231,13 +231,13 @@ public final class BackportedMethodRewriter implements CfInstructionDesugaring {
         return;
       }
 
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.K)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.K)) {
         initializeAndroidKMethodProviders(factory);
         if (typeIsAbsentOrPresentWithoutBackportsFrom(factory.objectsType, AndroidApiLevel.K)) {
           initializeAndroidKObjectsMethodProviders(factory);
         }
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.N)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.N)) {
         initializeAndroidNMethodProviders(factory);
         if (typeIsAbsentOrPresentWithoutBackportsFrom(factory.objectsType, AndroidApiLevel.N)) {
           initializeAndroidNObjectsMethodProviders(factory);
@@ -246,19 +246,19 @@ public final class BackportedMethodRewriter implements CfInstructionDesugaring {
           }
         }
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.O)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.O)) {
         initializeAndroidOMethodProviders(factory);
         if (typeIsPresent(factory.supplierType)) {
           initializeAndroidOThreadLocalMethodProviderWithSupplier(factory);
         }
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.P)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.P)) {
         initializeAndroidPMethodProviders(factory);
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.Q)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.Q)) {
         initializeAndroidQMethodProviders(factory);
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.R)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.R)) {
         if (options.testing.alwaysBackportListSetMapMethods
             || typeIsPresentWithoutBackportsFrom(factory.setType, AndroidApiLevel.R)) {
           initializeAndroidRSetListMapMethodProviders(factory);
@@ -270,17 +270,17 @@ public final class BackportedMethodRewriter implements CfInstructionDesugaring {
           }
         }
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.S)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.S)) {
         initializeAndroidSMethodProviders(factory);
         if (options.testing.alwaysBackportListSetMapMethods
             || typeIsPresentWithoutBackportsFrom(factory.setType, AndroidApiLevel.S)) {
           initializeAndroidSSetListMapMethodProviders(factory);
         }
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.Sv2)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.Sv2)) {
         initializeAndroidSv2MethodProviders(factory);
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.T)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.T)) {
         initializeAndroidTMethodProviders(factory);
         if (typeIsPresentWithoutBackportsFrom(factory.optionalType, AndroidApiLevel.T)) {
           initializeAndroidOptionalTMethodProviders(factory);
@@ -289,13 +289,13 @@ public final class BackportedMethodRewriter implements CfInstructionDesugaring {
           initializeAndroidTPredicateMethodProviders(factory);
         }
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.U)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.U)) {
         if (typeIsPresentWithoutNeverIntroducedBackports(factory.streamType)) {
           initializeAndroidUStreamMethodProviders(factory);
         }
         initializeAndroidUMethodProviders(factory);
       }
-      if (options.getMinApiLevel().isLessThan(AndroidApiLevel.V)) {
+      if (options.getLibraryMinApiLevel().isLessThan(AndroidApiLevel.V)) {
         initializeAndroidVMethodProviders(factory);
       }
     }
@@ -327,14 +327,14 @@ public final class BackportedMethodRewriter implements CfInstructionDesugaring {
             }
             AndroidApiLevel theApi = apiLevel.asKnownApiLevel().getApiLevel();
             if (typeIsInDesugaredLibrary(type)) {
-              assert theApi.equals(appView.options().getMinApiLevel());
+              assert theApi.equals(appView.options().getLibraryMinApiLevel());
               return;
             }
             DexClass clazz =
                 appView
                     .contextIndependentDefinitionForWithResolutionResult(type)
                     .toSingleClassWithProgramOverLibrary();
-            assert theApi.equals(api.max(appView.options().getMinApiLevel()))
+            assert theApi.equals(api.max(appView.options().getLibraryMinApiLevel()))
                 || (clazz != null && !clazz.isLibraryClass());
           });
       return true;
@@ -370,16 +370,16 @@ public final class BackportedMethodRewriter implements CfInstructionDesugaring {
             && !appView.options().machineDesugaredLibrarySpecification.includesJDK11Methods();
       }
       // TODO(b/224954240): Always use the apiDatabase when always available.
-      if (!appView.options().getMinApiLevel().isGreaterThanOrEqualTo(typeMinApi.get(type))) {
+      if (!appView.options().getLibraryMinApiLevel().isGreaterThanOrEqualTo(typeMinApi.get(type))) {
         // If the class is not present, we do not backport to avoid confusion in error messages.
         return false;
       }
-      return appView.options().getMinApiLevel().isLessThan(methodsMinAPI);
+      return appView.options().getLibraryMinApiLevel().isLessThan(methodsMinAPI);
     }
 
     private boolean typeIsPresent(DexType type) {
       // TODO(b/224954240): Always use the apiDatabase when always available.
-      return appView.options().getMinApiLevel().isGreaterThanOrEqualTo(typeMinApi.get(type))
+      return appView.options().getLibraryMinApiLevel().isGreaterThanOrEqualTo(typeMinApi.get(type))
           || typeIsInDesugaredLibrary(type);
     }
 
diff --git a/src/main/java/com/android/tools/r8/ir/optimize/api/InstanceInitializerOutliner.java b/src/main/java/com/android/tools/r8/ir/optimize/api/InstanceInitializerOutliner.java
index a8abce94b4..62486d3080 100644
--- a/src/main/java/com/android/tools/r8/ir/optimize/api/InstanceInitializerOutliner.java
+++ b/src/main/java/com/android/tools/r8/ir/optimize/api/InstanceInitializerOutliner.java
@@ -289,7 +289,7 @@ public class InstanceInitializerOutliner extends CodeRewriterPass<AppInfo> {
   protected boolean shouldRewriteCode(IRCode code, MethodProcessor methodProcessor) {
     if (!appView.options().desugarState.isOn()
         || !appView.options().apiModelingOptions().enableOutliningOfMethods
-        || !appView.options().getMinApiLevel().isGreaterThanOrEqualTo(AndroidApiLevel.L)) {
+        || !appView.options().getLibraryMinApiLevel().isGreaterThanOrEqualTo(AndroidApiLevel.L)) {
       return false;
     }
     // Only outline in primary optimization pass.
diff --git a/src/main/java/com/android/tools/r8/shaking/ProguardConfigurationUtils.java b/src/main/java/com/android/tools/r8/shaking/ProguardConfigurationUtils.java
index 9b0ed2e4e9..d86106b78f 100644
--- a/src/main/java/com/android/tools/r8/shaking/ProguardConfigurationUtils.java
+++ b/src/main/java/com/android/tools/r8/shaking/ProguardConfigurationUtils.java
@@ -28,7 +28,7 @@ public class ProguardConfigurationUtils {
       if (!hasExplicitAssumeValuesOrAssumeNoSideEffectsRuleForMinSdk(
           factory, options.getProguardConfiguration().getRules())) {
         synthesizedRules.add(
-            buildAssumeNoSideEffectsRuleForApiLevel(factory, options.getMinApiLevel()));
+            buildAssumeNoSideEffectsRuleForApiLevel(factory, options.getLibraryMinApiLevel()));
       }
     }
     // Add synthesized -keepclassmembers rules for the default initializer of classes that inherit
diff --git a/src/main/java/com/android/tools/r8/utils/AndroidApiLevelUtils.java b/src/main/java/com/android/tools/r8/utils/AndroidApiLevelUtils.java
index 0e533137a1..a23654e7e0 100644
--- a/src/main/java/com/android/tools/r8/utils/AndroidApiLevelUtils.java
+++ b/src/main/java/com/android/tools/r8/utils/AndroidApiLevelUtils.java
@@ -114,7 +114,10 @@ public class AndroidApiLevelUtils {
     if (apiLevelOfOriginal.isUnknownApiLevel()) {
       return false;
     }
-    return apiLevelOfOriginal.max(apiLevel).isLessThanOrEqualTo(options.getMinApiLevel()).isTrue();
+    return apiLevelOfOriginal
+        .max(apiLevel)
+        .isLessThanOrEqualTo(options.getLibraryMinApiLevel())
+        .isTrue();
   }
 
   public static boolean isApiSafeForReference(DexType type, AppView<?> appView) {
@@ -153,7 +156,7 @@ public class AndroidApiLevelUtils {
     ComputedApiLevel apiLevel =
         androidApiLevelCompute.computeApiLevelForLibraryReference(
             definition.getReference(), ComputedApiLevel.unknown());
-    return apiLevel.isLessThanOrEqualTo(options.getMinApiLevel()).isTrue();
+    return apiLevel.isLessThanOrEqualTo(options.getLibraryMinApiLevel()).isTrue();
   }
 
   private static boolean isApiSafeForReference(
diff --git a/src/main/java/com/android/tools/r8/utils/InternalOptions.java b/src/main/java/com/android/tools/r8/utils/InternalOptions.java
index 14efa1d34d..ac27332d85 100644
--- a/src/main/java/com/android/tools/r8/utils/InternalOptions.java
+++ b/src/main/java/com/android/tools/r8/utils/InternalOptions.java
@@ -718,7 +718,10 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
       getExtensiveInterfaceMethodMinifierLoggingFilter();
 
   public List<String> methodsFilter = ImmutableList.of();
-  private AndroidApiLevel minApiLevel = AndroidApiLevel.getDefault();
+  // Min API of ART.
+  private AndroidApiLevel minRuntimeApiLevel = AndroidApiLevel.getDefault();
+  // Min API of Android Framework.
+  private AndroidApiLevel minLibraryApiLevel = AndroidApiLevel.getDefault();
   // Skipping min_api check and compiling an intermediate result intended for later merging.
   // Intermediate builds also emits or update synthesized classes mapping.
   public boolean intermediate = false;
@@ -761,17 +764,46 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
   private final boolean enableTreeShaking;
   private final boolean enableMinification;
 
+  // TODO(b/333278162): Delete in favor of getLibraryMinApiVLevel / getRuntimeMinApiLevel.
   public AndroidApiLevel getMinApiLevel() {
     // If compiling to CF with no desugaring then we should not inspect the min-api.
     // For now we assert the API level for non-desugared CF is B, but it would be better to never
     // access the min-api in those cases.
-    assert desugarState.isOn() || isGeneratingDex() || minApiLevel.equals(AndroidApiLevel.B);
-    return minApiLevel;
+    assert desugarState.isOn() || isGeneratingDex() || minRuntimeApiLevel.equals(AndroidApiLevel.B);
+    return minRuntimeApiLevel;
   }
 
   public void setMinApiLevel(AndroidApiLevel minApiLevel) {
     assert minApiLevel != null;
-    this.minApiLevel = minApiLevel;
+    minRuntimeApiLevel = minApiLevel;
+    minLibraryApiLevel = minApiLevel;
+
+    String property = System.getProperty("com.android.tools.r8.runtimeMinApiLevel");
+    if (property != null) {
+      minRuntimeApiLevel = AndroidApiLevel.getAndroidApiLevel(Integer.valueOf(property));
+    }
+    // There is no reason to support this configuration.
+    if (minLibraryApiLevel.isLessThan(minRuntimeApiLevel)) {
+      throw new RuntimeException("libraryMinApiLevel must be <= runtimeMinApiLevel");
+    }
+  }
+
+  // For use with things that care about ART / Dalvik version.
+  public AndroidApiLevel getRuntimeMinApiLevel() {
+    // If compiling to CF with no desugaring then we should not inspect the min-api.
+    // For now we assert the API level for non-desugared CF is B, but it would be better to never
+    // access the min-api in those cases.
+    assert desugarState.isOn() || isGeneratingDex() || minRuntimeApiLevel.equals(AndroidApiLevel.B);
+    return minRuntimeApiLevel;
+  }
+
+  // For use with things that care what Java APIs are available in the bootclasspath.
+  public AndroidApiLevel getLibraryMinApiLevel() {
+    // If compiling to CF with no desugaring then we should not inspect the min-api.
+    // For now we assert the API level for non-desugared CF is B, but it would be better to never
+    // access the min-api in those cases.
+    assert desugarState.isOn() || isGeneratingDex() || minRuntimeApiLevel.equals(AndroidApiLevel.B);
+    return minLibraryApiLevel;
   }
 
   public boolean isOptimizing() {
@@ -2538,10 +2570,6 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
     enableNameReflectionOptimization = false;
   }
 
-  private boolean hasMinApi(AndroidApiLevel level) {
-    return getMinApiLevel().isGreaterThanOrEqualTo(level);
-  }
-
   /**
    * Predicate to guard on the support of a language feature.
    *
@@ -2550,11 +2578,24 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
    */
   private boolean hasFeaturePresentFrom(AndroidApiLevel level) {
     if (desugarState.isOn() || isGeneratingDex()) {
-      return level != null && hasMinApi(level);
+      if (level == null) {
+        return false;
+      }
+      return getRuntimeMinApiLevel().isGreaterThanOrEqualTo(level);
+    }
+    // If not desugaring and not compiling to DEX, then the API level is effectively ignored and
+    // we assume that everything in the input is supported in the output.
+    assert minRuntimeApiLevel.equals(B);
+    return true;
+  }
+
+  private boolean hasLibraryFeaturePresentFrom(AndroidApiLevel level) {
+    if (desugarState.isOn() || isGeneratingDex()) {
+      return level != null && getLibraryMinApiLevel().isGreaterThanOrEqualTo(level);
     }
     // If not desugaring and not compiling to DEX, then the API level is effectively ignored and
     // we assume that everything in the input is supported in the output.
-    assert minApiLevel.equals(B);
+    assert minRuntimeApiLevel.equals(B);
     return true;
   }
 
@@ -2566,17 +2607,18 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
    */
   private boolean canHaveBugPresentUntilExclusive(AndroidApiLevel level) {
     if (desugarState.isOn() || isGeneratingDex()) {
-      return level == null || !hasMinApi(level);
+      return level == null || !getLibraryMinApiLevel().isGreaterThanOrEqualTo(level);
     }
-    assert minApiLevel.equals(B);
+    assert minRuntimeApiLevel.equals(B);
     return true;
   }
 
+
   private boolean canHaveBugPresentUntilInclusive(AndroidApiLevel level) {
     if (desugarState.isOn() || isGeneratingDex()) {
-      return level == null || !getMinApiLevel().isGreaterThan(level);
+      return level == null || !getLibraryMinApiLevel().isGreaterThan(level);
     }
-    assert minApiLevel.equals(B);
+    assert minRuntimeApiLevel.equals(B);
     return true;
   }
 
@@ -2753,13 +2795,13 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
 
   public boolean canUseNativeDexPcInsteadOfDebugInfo() {
     return canUseDexPc2PcAsDebugInformation()
-        && hasMinApi(AndroidApiLevel.O)
+        && getRuntimeMinApiLevel().isGreaterThanOrEqualTo(AndroidApiLevel.O)
         && allowDiscardingResidualDebugInfo();
   }
 
   public boolean canUseNativeDexPcInsteadOfDebugInfo(ProgramMethod method) {
     return canUseDexPc2PcAsDebugInformation()
-        && hasMinApi(AndroidApiLevel.O)
+        && getRuntimeMinApiLevel().isGreaterThanOrEqualTo(AndroidApiLevel.O)
         && allowDiscardingResidualDebugInfo(method);
   }
 
@@ -2790,28 +2832,31 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
 
   public boolean canUseMultidex() {
     assert isGeneratingDex();
-    return intermediate || hasMinApi(AndroidApiLevel.L);
+    if (intermediate) {
+      return true;
+    }
+    return getRuntimeMinApiLevel().isGreaterThanOrEqualTo(AndroidApiLevel.L);
   }
 
   public boolean canUseJavaUtilObjects() {
-    return hasFeaturePresentFrom(AndroidApiLevel.K);
+    return hasLibraryFeaturePresentFrom(AndroidApiLevel.K);
   }
 
   public boolean canUseJavaUtilObjectsIsNull() {
-    return hasFeaturePresentFrom(AndroidApiLevel.N);
+    return hasLibraryFeaturePresentFrom(AndroidApiLevel.N);
   }
 
   public boolean canUseJavaUtilObjectsNonNull() {
-    return isGeneratingDex() && hasFeaturePresentFrom(AndroidApiLevel.N);
+    return isGeneratingDex() && hasLibraryFeaturePresentFrom(AndroidApiLevel.N);
   }
 
   public boolean canUseSuppressedExceptions() {
     // TODO(b/214239152): Suppressed exceptions are @hide from at least 4.0.1 / Android I / API 14.
-    return hasFeaturePresentFrom(AndroidApiLevel.K);
+    return hasLibraryFeaturePresentFrom(AndroidApiLevel.K);
   }
 
   public boolean canUseAssertionErrorTwoArgumentConstructor() {
-    return hasFeaturePresentFrom(AndroidApiLevel.K);
+    return hasLibraryFeaturePresentFrom(AndroidApiLevel.K);
   }
 
   public boolean canUseCanonicalizedCodeObjects() {
@@ -3165,7 +3210,8 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
   //
   // See b/131349148
   public boolean canHaveDalvikCatchHandlerVerificationBug() {
-    return canHaveBugPresentUntilExclusive(AndroidApiLevel.L);
+    return canHaveBugPresentUntilExclusive(AndroidApiLevel.L)
+        && !getLibraryMinApiLevel().isGreaterThanOrEqualTo(AndroidApiLevel.L);
   }
 
   // Having an invoke instruction that targets an abstract method on a non-abstract class will fail
@@ -3210,7 +3256,7 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
   //
   // See b/182137865.
   public boolean canParseNumbersWithPlusPrefix() {
-    return hasFeaturePresentFrom(AndroidApiLevel.L);
+    return hasLibraryFeaturePresentFrom(AndroidApiLevel.L);
   }
 
   // Lollipop and Marshmallow devices do not correctly handle invoke-super when the static holder
@@ -3282,6 +3328,6 @@ public class InternalOptions implements GlobalKeepInfoConfiguration {
   }
 
   public boolean canInitNewInstanceUsingSuperclassConstructor() {
-    return isGeneratingDex() && minApiLevel.isGreaterThanOrEqualTo(AndroidApiLevel.L);
+    return isGeneratingDex() && minRuntimeApiLevel.isGreaterThanOrEqualTo(AndroidApiLevel.L);
   }
 }
-- 
2.45.2.1089.g2a221341d9-goog

