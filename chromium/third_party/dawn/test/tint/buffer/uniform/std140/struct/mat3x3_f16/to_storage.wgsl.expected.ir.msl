#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f16_array_element {
  /* 0x0000 */ packed_half3 packed;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

struct S_packed_vec3 {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 4> tint_pad_1;
  /* 0x0008 */ tint_array<tint_packed_vec3_f16_array_element, 3> m;
  /* 0x0020 */ tint_array<int8_t, 32> tint_pad_2;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_3;
};

struct S {
  int before;
  half3x3 m;
  int after;
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  volatile bool VOLATILE_NAME = true; \
  if (VOLATILE_NAME)

struct tint_module_vars_struct {
  const constant tint_array<S_packed_vec3, 4>* u;
  device tint_array<S_packed_vec3, 4>* s;
};

void tint_store_and_preserve_padding_2(device tint_array<tint_packed_vec3_f16_array_element, 3>* const target, half3x3 value_param) {
  (*target)[0u].packed = packed_half3(value_param[0u]);
  (*target)[1u].packed = packed_half3(value_param[1u]);
  (*target)[2u].packed = packed_half3(value_param[2u]);
}

void tint_store_and_preserve_padding_1(device S_packed_vec3* const target, S value_param) {
  (*target).before = value_param.before;
  tint_store_and_preserve_padding_2((&(*target).m), value_param.m);
  (*target).after = value_param.after;
}

S tint_load_struct_packed_vec3(const constant S_packed_vec3* const from) {
  int const v = (*from).before;
  tint_array<tint_packed_vec3_f16_array_element, 3> const v_1 = (*from).m;
  half3 const v_2 = half3(v_1[0u].packed);
  half3 const v_3 = half3(v_1[1u].packed);
  half3x3 const v_4 = half3x3(v_2, v_3, half3(v_1[2u].packed));
  return S{.before=v, .m=v_4, .after=(*from).after};
}

void tint_store_and_preserve_padding(device tint_array<S_packed_vec3, 4>* const target, tint_array<S, 4> value_param) {
  {
    uint v_5 = 0u;
    v_5 = 0u;
    TINT_ISOLATE_UB(tint_volatile_true) while(true) {
      uint const v_6 = v_5;
      if ((v_6 >= 4u)) {
        break;
      }
      tint_store_and_preserve_padding_1((&(*target)[v_6]), value_param[v_6]);
      {
        v_5 = (v_6 + 1u);
      }
      continue;
    }
  }
}

tint_array<S, 4> tint_load_array_packed_vec3(const constant tint_array<S_packed_vec3, 4>* const from) {
  S const v_7 = tint_load_struct_packed_vec3((&(*from)[0u]));
  S const v_8 = tint_load_struct_packed_vec3((&(*from)[1u]));
  S const v_9 = tint_load_struct_packed_vec3((&(*from)[2u]));
  return tint_array<S, 4>{v_7, v_8, v_9, tint_load_struct_packed_vec3((&(*from)[3u]))};
}

kernel void f(const constant tint_array<S_packed_vec3, 4>* u [[buffer(0)]], device tint_array<S_packed_vec3, 4>* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  tint_store_and_preserve_padding(tint_module_vars.s, tint_load_array_packed_vec3(tint_module_vars.u));
  tint_store_and_preserve_padding_1((&(*tint_module_vars.s)[1]), tint_load_struct_packed_vec3((&(*tint_module_vars.u)[2])));
  tint_array<tint_packed_vec3_f16_array_element, 3> const v_10 = (*tint_module_vars.u)[2].m;
  half3 const v_11 = half3(v_10[0u].packed);
  half3 const v_12 = half3(v_10[1u].packed);
  tint_store_and_preserve_padding_2((&(*tint_module_vars.s)[3].m), half3x3(v_11, v_12, half3(v_10[2u].packed)));
  (*tint_module_vars.s)[1].m[0].packed = packed_half3(half3((*tint_module_vars.u)[0].m[1].packed).zxy);
}
