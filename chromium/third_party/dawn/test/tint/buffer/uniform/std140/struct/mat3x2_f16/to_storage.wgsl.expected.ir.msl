#include <metal_stdlib>
using namespace metal;

struct S {
  int before;
  half3x2 m;
  int after;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_module_vars_struct {
  const constant tint_array<S, 4>* u;
  device tint_array<S, 4>* s;
};

void tint_store_and_preserve_padding_1(device S* const target, S value_param) {
  (*target).before = value_param.before;
  (*target).m = value_param.m;
  (*target).after = value_param.after;
}

void tint_store_and_preserve_padding(device tint_array<S, 4>* const target, tint_array<S, 4> value_param) {
  {
    uint v = 0u;
    v = 0u;
    while(true) {
      uint const v_1 = v;
      if ((v_1 >= 4u)) {
        break;
      }
      tint_store_and_preserve_padding_1((&(*target)[v_1]), value_param[v_1]);
      {
        v = (v_1 + 1u);
      }
      continue;
    }
  }
}

kernel void f(const constant tint_array<S, 4>* u [[buffer(0)]], device tint_array<S, 4>* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  tint_store_and_preserve_padding(tint_module_vars.s, (*tint_module_vars.u));
  tint_store_and_preserve_padding_1((&(*tint_module_vars.s)[1]), (*tint_module_vars.u)[2]);
  (*tint_module_vars.s)[3].m = (*tint_module_vars.u)[2].m;
  (*tint_module_vars.s)[1].m[0] = (*tint_module_vars.u)[0].m[1].yx;
}
