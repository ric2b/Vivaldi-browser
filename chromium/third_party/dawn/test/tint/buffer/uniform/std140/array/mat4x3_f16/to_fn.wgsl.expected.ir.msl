#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_module_vars_struct {
  const constant tint_array<half4x3, 4>* u;
  device half* s;
};

half a(tint_array<half4x3, 4> a_1) {
  return a_1[0][0][0u];
}

half b(half4x3 m) {
  return m[0][0u];
}

half c(half3 v) {
  return v[0u];
}

half d(half f) {
  return f;
}

kernel void f(const constant tint_array<half4x3, 4>* u [[buffer(0)]], device half* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  half const v_1 = a((*tint_module_vars.u));
  half const v_2 = (v_1 + b((*tint_module_vars.u)[1]));
  half const v_3 = (v_2 + c((*tint_module_vars.u)[1][0].zxy));
  (*tint_module_vars.s) = (v_3 + d((*tint_module_vars.u)[1][0].zxy[0u]));
}
