#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad_1;
};

struct S_packed_vec3 {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad;
  /* 0x0010 */ tint_array<tint_packed_vec3_f32_array_element, 4> m;
  /* 0x0050 */ tint_array<int8_t, 48> tint_pad_2;
  /* 0x0080 */ int after;
  /* 0x0084 */ tint_array<int8_t, 60> tint_pad_3;
};

struct S {
  int before;
  float4x3 m;
  int after;
};

struct tint_module_vars_struct {
  const constant tint_array<S_packed_vec3, 4>* u;
  threadgroup tint_array<S_packed_vec3, 4>* w;
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  volatile bool VOLATILE_NAME = true; \
  if (VOLATILE_NAME)

struct tint_symbol_1 {
  tint_array<S_packed_vec3, 4> tint_symbol;
};

void tint_store_array_packed_vec3_1(threadgroup S_packed_vec3* const to, S value) {
  (*to).before = value.before;
  (*to).m[0u].packed = packed_float3(value.m[0u]);
  (*to).m[1u].packed = packed_float3(value.m[1u]);
  (*to).m[2u].packed = packed_float3(value.m[2u]);
  (*to).m[3u].packed = packed_float3(value.m[3u]);
  (*to).after = value.after;
}

S tint_load_struct_packed_vec3(const constant S_packed_vec3* const from) {
  int const v = (*from).before;
  tint_array<tint_packed_vec3_f32_array_element, 4> const v_1 = (*from).m;
  float3 const v_2 = float3(v_1[0u].packed);
  float3 const v_3 = float3(v_1[1u].packed);
  float3 const v_4 = float3(v_1[2u].packed);
  float4x3 const v_5 = float4x3(v_2, v_3, v_4, float3(v_1[3u].packed));
  return S{.before=v, .m=v_5, .after=(*from).after};
}

void tint_store_array_packed_vec3(threadgroup tint_array<S_packed_vec3, 4>* const to, tint_array<S, 4> value) {
  tint_store_array_packed_vec3_1((&(*to)[0u]), value[0u]);
  tint_store_array_packed_vec3_1((&(*to)[1u]), value[1u]);
  tint_store_array_packed_vec3_1((&(*to)[2u]), value[2u]);
  tint_store_array_packed_vec3_1((&(*to)[3u]), value[3u]);
}

tint_array<S, 4> tint_load_array_packed_vec3(const constant tint_array<S_packed_vec3, 4>* const from) {
  S const v_6 = tint_load_struct_packed_vec3((&(*from)[0u]));
  S const v_7 = tint_load_struct_packed_vec3((&(*from)[1u]));
  S const v_8 = tint_load_struct_packed_vec3((&(*from)[2u]));
  return tint_array<S, 4>{v_6, v_7, v_8, tint_load_struct_packed_vec3((&(*from)[3u]))};
}

void f_inner(uint tint_local_index, tint_module_vars_struct tint_module_vars) {
  {
    uint v_9 = 0u;
    v_9 = tint_local_index;
    TINT_ISOLATE_UB(tint_volatile_true) while(true) {
      uint const v_10 = v_9;
      if ((v_10 >= 4u)) {
        break;
      }
      tint_store_array_packed_vec3_1((&(*tint_module_vars.w)[v_10]), S{});
      {
        v_9 = (v_10 + 1u);
      }
      continue;
    }
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  tint_store_array_packed_vec3(tint_module_vars.w, tint_load_array_packed_vec3(tint_module_vars.u));
  tint_store_array_packed_vec3_1((&(*tint_module_vars.w)[1]), tint_load_struct_packed_vec3((&(*tint_module_vars.u)[2])));
  tint_array<tint_packed_vec3_f32_array_element, 4> const v_11 = (*tint_module_vars.u)[2].m;
  float3 const v_12 = float3(v_11[0u].packed);
  float3 const v_13 = float3(v_11[1u].packed);
  float3 const v_14 = float3(v_11[2u].packed);
  float4x3 const v_15 = float4x3(v_12, v_13, v_14, float3(v_11[3u].packed));
  (*tint_module_vars.w)[3].m[0u].packed = packed_float3(v_15[0u]);
  (*tint_module_vars.w)[3].m[1u].packed = packed_float3(v_15[1u]);
  (*tint_module_vars.w)[3].m[2u].packed = packed_float3(v_15[2u]);
  (*tint_module_vars.w)[3].m[3u].packed = packed_float3(v_15[3u]);
  (*tint_module_vars.w)[1].m[0].packed = packed_float3(float3((*tint_module_vars.u)[0].m[1].packed).zxy);
}

kernel void f(uint tint_local_index [[thread_index_in_threadgroup]], const constant tint_array<S_packed_vec3, 4>* u [[buffer(0)]], threadgroup tint_symbol_1* v_16 [[threadgroup(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .w=(&(*v_16).tint_symbol)};
  f_inner(tint_local_index, tint_module_vars);
}
