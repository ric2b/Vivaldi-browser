#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f16_array_element {
  /* 0x0000 */ packed_half3 packed;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  volatile bool VOLATILE_NAME = true; \
  if (VOLATILE_NAME)

struct tint_module_vars_struct {
  const constant tint_array<tint_array<tint_packed_vec3_f16_array_element, 2>, 4>* u;
  device tint_array<tint_array<tint_packed_vec3_f16_array_element, 2>, 4>* s;
};

void tint_store_and_preserve_padding_1(device tint_array<tint_packed_vec3_f16_array_element, 2>* const target, half2x3 value_param) {
  (*target)[0u].packed = packed_half3(value_param[0u]);
  (*target)[1u].packed = packed_half3(value_param[1u]);
}

void tint_store_and_preserve_padding(device tint_array<tint_array<tint_packed_vec3_f16_array_element, 2>, 4>* const target, tint_array<half2x3, 4> value_param) {
  {
    uint v = 0u;
    v = 0u;
    TINT_ISOLATE_UB(tint_volatile_true) while(true) {
      uint const v_1 = v;
      if ((v_1 >= 4u)) {
        break;
      }
      tint_store_and_preserve_padding_1((&(*target)[v_1]), value_param[v_1]);
      {
        v = (v_1 + 1u);
      }
      continue;
    }
  }
}

tint_array<half2x3, 4> tint_load_array_packed_vec3(const constant tint_array<tint_array<tint_packed_vec3_f16_array_element, 2>, 4>* const from) {
  tint_array<tint_packed_vec3_f16_array_element, 2> const v_2 = (*from)[0u];
  half3 const v_3 = half3(v_2[0u].packed);
  half2x3 const v_4 = half2x3(v_3, half3(v_2[1u].packed));
  tint_array<tint_packed_vec3_f16_array_element, 2> const v_5 = (*from)[1u];
  half3 const v_6 = half3(v_5[0u].packed);
  half2x3 const v_7 = half2x3(v_6, half3(v_5[1u].packed));
  tint_array<tint_packed_vec3_f16_array_element, 2> const v_8 = (*from)[2u];
  half3 const v_9 = half3(v_8[0u].packed);
  half2x3 const v_10 = half2x3(v_9, half3(v_8[1u].packed));
  tint_array<tint_packed_vec3_f16_array_element, 2> const v_11 = (*from)[3u];
  half3 const v_12 = half3(v_11[0u].packed);
  return tint_array<half2x3, 4>{v_4, v_7, v_10, half2x3(v_12, half3(v_11[1u].packed))};
}

kernel void f(const constant tint_array<tint_array<tint_packed_vec3_f16_array_element, 2>, 4>* u [[buffer(0)]], device tint_array<tint_array<tint_packed_vec3_f16_array_element, 2>, 4>* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  tint_store_and_preserve_padding(tint_module_vars.s, tint_load_array_packed_vec3(tint_module_vars.u));
  tint_array<tint_packed_vec3_f16_array_element, 2> const v_13 = (*tint_module_vars.u)[2];
  half3 const v_14 = half3(v_13[0u].packed);
  tint_store_and_preserve_padding_1((&(*tint_module_vars.s)[1]), half2x3(v_14, half3(v_13[1u].packed)));
  (*tint_module_vars.s)[1][0].packed = packed_half3(half3((*tint_module_vars.u)[0][1].packed).zxy);
  (*tint_module_vars.s)[1][0].packed[0u] = (*tint_module_vars.u)[0][1].packed[0u];
}
