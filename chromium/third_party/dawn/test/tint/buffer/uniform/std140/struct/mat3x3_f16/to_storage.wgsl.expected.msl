#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  {volatile bool VOLATILE_NAME = false; if (VOLATILE_NAME) break;}

struct tint_packed_vec3_f16_array_element {
  /* 0x0000 */ packed_half3 elements;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

struct S_tint_packed_vec3 {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 4> tint_pad_1;
  /* 0x0008 */ tint_array<tint_packed_vec3_f16_array_element, 3> m;
  /* 0x0020 */ tint_array<int8_t, 32> tint_pad_2;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_3;
};

half3x3 tint_unpack_vec3_in_composite(tint_array<tint_packed_vec3_f16_array_element, 3> in) {
  half3x3 result = half3x3(half3(in[0].elements), half3(in[1].elements), half3(in[2].elements));
  return result;
}

struct S {
  int before;
  half3x3 m;
  int after;
};

S tint_unpack_vec3_in_composite_1(S_tint_packed_vec3 in) {
  S result = {};
  result.before = in.before;
  result.m = tint_unpack_vec3_in_composite(in.m);
  result.after = in.after;
  return result;
}

tint_array<S, 4> tint_unpack_vec3_in_composite_2(tint_array<S_tint_packed_vec3, 4> in) {
  tint_array<S, 4> result = tint_array<S, 4>{tint_unpack_vec3_in_composite_1(in[0]), tint_unpack_vec3_in_composite_1(in[1]), tint_unpack_vec3_in_composite_1(in[2]), tint_unpack_vec3_in_composite_1(in[3])};
  return result;
}

void assign_and_preserve_padding_2(device tint_array<tint_packed_vec3_f16_array_element, 3>* const dest, half3x3 value) {
  (*(dest))[0u].elements = packed_half3(value[0u]);
  (*(dest))[1u].elements = packed_half3(value[1u]);
  (*(dest))[2u].elements = packed_half3(value[2u]);
}

void assign_and_preserve_padding_1(device S_tint_packed_vec3* const dest, S value) {
  (*(dest)).before = value.before;
  assign_and_preserve_padding_2(&((*(dest)).m), value.m);
  (*(dest)).after = value.after;
}

void assign_and_preserve_padding(device tint_array<S_tint_packed_vec3, 4>* const dest, tint_array<S, 4> value) {
  for(uint i = 0u; (i < 4u); i = (i + 1u)) {
    TINT_ISOLATE_UB(tint_volatile_false);
    assign_and_preserve_padding_1(&((*(dest))[i]), value[i]);
  }
}

kernel void f(device tint_array<S_tint_packed_vec3, 4>* tint_symbol [[buffer(1)]], const constant tint_array<S_tint_packed_vec3, 4>* tint_symbol_1 [[buffer(0)]]) {
  assign_and_preserve_padding(tint_symbol, tint_unpack_vec3_in_composite_2(*(tint_symbol_1)));
  assign_and_preserve_padding_1(&((*(tint_symbol))[1]), tint_unpack_vec3_in_composite_1((*(tint_symbol_1))[2]));
  assign_and_preserve_padding_2(&((*(tint_symbol))[3].m), tint_unpack_vec3_in_composite((*(tint_symbol_1))[2].m));
  (*(tint_symbol))[1].m[0].elements = packed_half3(half3((*(tint_symbol_1))[0].m[1].elements).zxy);
  return;
}

