#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f16_array_element {
  /* 0x0000 */ packed_half3 packed;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_array<tint_packed_vec3_f16_array_element, 4>, 4>* u;
  threadgroup tint_array<tint_array<tint_packed_vec3_f16_array_element, 4>, 4>* w;
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  volatile bool VOLATILE_NAME = true; \
  if (VOLATILE_NAME)

struct tint_symbol_1 {
  tint_array<tint_array<tint_packed_vec3_f16_array_element, 4>, 4> tint_symbol;
};

void tint_store_array_packed_vec3(threadgroup tint_array<tint_array<tint_packed_vec3_f16_array_element, 4>, 4>* const to, tint_array<half4x3, 4> value) {
  (*to)[0u][0u].packed = packed_half3(value[0u][0u]);
  (*to)[0u][1u].packed = packed_half3(value[0u][1u]);
  (*to)[0u][2u].packed = packed_half3(value[0u][2u]);
  (*to)[0u][3u].packed = packed_half3(value[0u][3u]);
  (*to)[1u][0u].packed = packed_half3(value[1u][0u]);
  (*to)[1u][1u].packed = packed_half3(value[1u][1u]);
  (*to)[1u][2u].packed = packed_half3(value[1u][2u]);
  (*to)[1u][3u].packed = packed_half3(value[1u][3u]);
  (*to)[2u][0u].packed = packed_half3(value[2u][0u]);
  (*to)[2u][1u].packed = packed_half3(value[2u][1u]);
  (*to)[2u][2u].packed = packed_half3(value[2u][2u]);
  (*to)[2u][3u].packed = packed_half3(value[2u][3u]);
  (*to)[3u][0u].packed = packed_half3(value[3u][0u]);
  (*to)[3u][1u].packed = packed_half3(value[3u][1u]);
  (*to)[3u][2u].packed = packed_half3(value[3u][2u]);
  (*to)[3u][3u].packed = packed_half3(value[3u][3u]);
}

tint_array<half4x3, 4> tint_load_array_packed_vec3(const constant tint_array<tint_array<tint_packed_vec3_f16_array_element, 4>, 4>* const from) {
  tint_array<tint_packed_vec3_f16_array_element, 4> const v = (*from)[0u];
  half3 const v_1 = half3(v[0u].packed);
  half3 const v_2 = half3(v[1u].packed);
  half3 const v_3 = half3(v[2u].packed);
  half4x3 const v_4 = half4x3(v_1, v_2, v_3, half3(v[3u].packed));
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_5 = (*from)[1u];
  half3 const v_6 = half3(v_5[0u].packed);
  half3 const v_7 = half3(v_5[1u].packed);
  half3 const v_8 = half3(v_5[2u].packed);
  half4x3 const v_9 = half4x3(v_6, v_7, v_8, half3(v_5[3u].packed));
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_10 = (*from)[2u];
  half3 const v_11 = half3(v_10[0u].packed);
  half3 const v_12 = half3(v_10[1u].packed);
  half3 const v_13 = half3(v_10[2u].packed);
  half4x3 const v_14 = half4x3(v_11, v_12, v_13, half3(v_10[3u].packed));
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_15 = (*from)[3u];
  half3 const v_16 = half3(v_15[0u].packed);
  half3 const v_17 = half3(v_15[1u].packed);
  half3 const v_18 = half3(v_15[2u].packed);
  return tint_array<half4x3, 4>{v_4, v_9, v_14, half4x3(v_16, v_17, v_18, half3(v_15[3u].packed))};
}

void f_inner(uint tint_local_index, tint_module_vars_struct tint_module_vars) {
  {
    uint v_19 = 0u;
    v_19 = tint_local_index;
    TINT_ISOLATE_UB(tint_volatile_true) while(true) {
      uint const v_20 = v_19;
      if ((v_20 >= 4u)) {
        break;
      }
      (*tint_module_vars.w)[v_20][0u].packed = packed_half3(half4x3(half3(0.0h), half3(0.0h), half3(0.0h), half3(0.0h))[0u]);
      (*tint_module_vars.w)[v_20][1u].packed = packed_half3(half4x3(half3(0.0h), half3(0.0h), half3(0.0h), half3(0.0h))[1u]);
      (*tint_module_vars.w)[v_20][2u].packed = packed_half3(half4x3(half3(0.0h), half3(0.0h), half3(0.0h), half3(0.0h))[2u]);
      (*tint_module_vars.w)[v_20][3u].packed = packed_half3(half4x3(half3(0.0h), half3(0.0h), half3(0.0h), half3(0.0h))[3u]);
      {
        v_19 = (v_20 + 1u);
      }
      continue;
    }
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  tint_store_array_packed_vec3(tint_module_vars.w, tint_load_array_packed_vec3(tint_module_vars.u));
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_21 = (*tint_module_vars.u)[2];
  half3 const v_22 = half3(v_21[0u].packed);
  half3 const v_23 = half3(v_21[1u].packed);
  half3 const v_24 = half3(v_21[2u].packed);
  half4x3 const v_25 = half4x3(v_22, v_23, v_24, half3(v_21[3u].packed));
  (*tint_module_vars.w)[1][0u].packed = packed_half3(v_25[0u]);
  (*tint_module_vars.w)[1][1u].packed = packed_half3(v_25[1u]);
  (*tint_module_vars.w)[1][2u].packed = packed_half3(v_25[2u]);
  (*tint_module_vars.w)[1][3u].packed = packed_half3(v_25[3u]);
  (*tint_module_vars.w)[1][0].packed = packed_half3(half3((*tint_module_vars.u)[0][1].packed).zxy);
  (*tint_module_vars.w)[1][0].packed[0u] = (*tint_module_vars.u)[0][1].packed[0u];
}

kernel void f(uint tint_local_index [[thread_index_in_threadgroup]], const constant tint_array<tint_array<tint_packed_vec3_f16_array_element, 4>, 4>* u [[buffer(0)]], threadgroup tint_symbol_1* v_26 [[threadgroup(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .w=(&(*v_26).tint_symbol)};
  f_inner(tint_local_index, tint_module_vars);
}
