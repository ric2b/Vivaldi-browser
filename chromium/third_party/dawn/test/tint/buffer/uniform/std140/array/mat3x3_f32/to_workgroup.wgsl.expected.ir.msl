#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* u;
  threadgroup tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* w;
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  volatile bool VOLATILE_NAME = true; \
  if (VOLATILE_NAME)

struct tint_symbol_1 {
  tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4> tint_symbol;
};

void tint_store_array_packed_vec3(threadgroup tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* const to, tint_array<float3x3, 4> value) {
  (*to)[0u][0u].packed = packed_float3(value[0u][0u]);
  (*to)[0u][1u].packed = packed_float3(value[0u][1u]);
  (*to)[0u][2u].packed = packed_float3(value[0u][2u]);
  (*to)[1u][0u].packed = packed_float3(value[1u][0u]);
  (*to)[1u][1u].packed = packed_float3(value[1u][1u]);
  (*to)[1u][2u].packed = packed_float3(value[1u][2u]);
  (*to)[2u][0u].packed = packed_float3(value[2u][0u]);
  (*to)[2u][1u].packed = packed_float3(value[2u][1u]);
  (*to)[2u][2u].packed = packed_float3(value[2u][2u]);
  (*to)[3u][0u].packed = packed_float3(value[3u][0u]);
  (*to)[3u][1u].packed = packed_float3(value[3u][1u]);
  (*to)[3u][2u].packed = packed_float3(value[3u][2u]);
}

tint_array<float3x3, 4> tint_load_array_packed_vec3(const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* const from) {
  tint_array<tint_packed_vec3_f32_array_element, 3> const v = (*from)[0u];
  float3 const v_1 = float3(v[0u].packed);
  float3 const v_2 = float3(v[1u].packed);
  float3x3 const v_3 = float3x3(v_1, v_2, float3(v[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_4 = (*from)[1u];
  float3 const v_5 = float3(v_4[0u].packed);
  float3 const v_6 = float3(v_4[1u].packed);
  float3x3 const v_7 = float3x3(v_5, v_6, float3(v_4[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_8 = (*from)[2u];
  float3 const v_9 = float3(v_8[0u].packed);
  float3 const v_10 = float3(v_8[1u].packed);
  float3x3 const v_11 = float3x3(v_9, v_10, float3(v_8[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_12 = (*from)[3u];
  float3 const v_13 = float3(v_12[0u].packed);
  float3 const v_14 = float3(v_12[1u].packed);
  return tint_array<float3x3, 4>{v_3, v_7, v_11, float3x3(v_13, v_14, float3(v_12[2u].packed))};
}

void f_inner(uint tint_local_index, tint_module_vars_struct tint_module_vars) {
  {
    uint v_15 = 0u;
    v_15 = tint_local_index;
    TINT_ISOLATE_UB(tint_volatile_true) while(true) {
      uint const v_16 = v_15;
      if ((v_16 >= 4u)) {
        break;
      }
      (*tint_module_vars.w)[v_16][0u].packed = packed_float3(float3x3(float3(0.0f), float3(0.0f), float3(0.0f))[0u]);
      (*tint_module_vars.w)[v_16][1u].packed = packed_float3(float3x3(float3(0.0f), float3(0.0f), float3(0.0f))[1u]);
      (*tint_module_vars.w)[v_16][2u].packed = packed_float3(float3x3(float3(0.0f), float3(0.0f), float3(0.0f))[2u]);
      {
        v_15 = (v_16 + 1u);
      }
      continue;
    }
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  tint_store_array_packed_vec3(tint_module_vars.w, tint_load_array_packed_vec3(tint_module_vars.u));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_17 = (*tint_module_vars.u)[2];
  float3 const v_18 = float3(v_17[0u].packed);
  float3 const v_19 = float3(v_17[1u].packed);
  float3x3 const v_20 = float3x3(v_18, v_19, float3(v_17[2u].packed));
  (*tint_module_vars.w)[1][0u].packed = packed_float3(v_20[0u]);
  (*tint_module_vars.w)[1][1u].packed = packed_float3(v_20[1u]);
  (*tint_module_vars.w)[1][2u].packed = packed_float3(v_20[2u]);
  (*tint_module_vars.w)[1][0].packed = packed_float3(float3((*tint_module_vars.u)[0][1].packed).zxy);
  (*tint_module_vars.w)[1][0].packed[0u] = (*tint_module_vars.u)[0][1].packed[0u];
}

kernel void f(uint tint_local_index [[thread_index_in_threadgroup]], const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* u [[buffer(0)]], threadgroup tint_symbol_1* v_21 [[threadgroup(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .w=(&(*v_21).tint_symbol)};
  f_inner(tint_local_index, tint_module_vars);
}
