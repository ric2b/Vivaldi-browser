#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* a;
  device float* s;
};

tint_array<float3x3, 4> tint_load_array_packed_vec3(const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* const from) {
  tint_array<tint_packed_vec3_f32_array_element, 3> const v = (*from)[0u];
  float3 const v_1 = float3(v[0u].packed);
  float3 const v_2 = float3(v[1u].packed);
  float3x3 const v_3 = float3x3(v_1, v_2, float3(v[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_4 = (*from)[1u];
  float3 const v_5 = float3(v_4[0u].packed);
  float3 const v_6 = float3(v_4[1u].packed);
  float3x3 const v_7 = float3x3(v_5, v_6, float3(v_4[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_8 = (*from)[2u];
  float3 const v_9 = float3(v_8[0u].packed);
  float3 const v_10 = float3(v_8[1u].packed);
  float3x3 const v_11 = float3x3(v_9, v_10, float3(v_8[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_12 = (*from)[3u];
  float3 const v_13 = float3(v_12[0u].packed);
  float3 const v_14 = float3(v_12[1u].packed);
  return tint_array<float3x3, 4>{v_3, v_7, v_11, float3x3(v_13, v_14, float3(v_12[2u].packed))};
}

kernel void f(const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* a [[buffer(0)]], device float* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.a=a, .s=s};
  const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* const p_a = tint_module_vars.a;
  const constant tint_array<tint_packed_vec3_f32_array_element, 3>* const p_a_2 = (&(*p_a)[2]);
  const constant packed_float3* const p_a_2_1 = (&(*p_a_2)[1].packed);
  tint_array<float3x3, 4> const l_a = tint_load_array_packed_vec3(p_a);
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_15 = (*p_a_2);
  float3 const v_16 = float3(v_15[0u].packed);
  float3 const v_17 = float3(v_15[1u].packed);
  float3x3 const l_a_i = float3x3(v_16, v_17, float3(v_15[2u].packed));
  float3 const l_a_i_i = float3((*p_a_2_1));
  (*tint_module_vars.s) = ((((*p_a_2_1)[0u] + l_a[0][0][0u]) + l_a_i[0][0u]) + l_a_i_i[0u]);
}
