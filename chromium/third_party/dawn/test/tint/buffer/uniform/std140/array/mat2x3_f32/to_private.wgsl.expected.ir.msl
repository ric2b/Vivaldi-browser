#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 2>, 4>* u;
  device float* s;
  thread tint_array<float2x3, 4>* p;
};

tint_array<float2x3, 4> tint_load_array_packed_vec3(const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 2>, 4>* const from) {
  tint_array<tint_packed_vec3_f32_array_element, 2> const v = (*from)[0u];
  float3 const v_1 = float3(v[0u].packed);
  float2x3 const v_2 = float2x3(v_1, float3(v[1u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 2> const v_3 = (*from)[1u];
  float3 const v_4 = float3(v_3[0u].packed);
  float2x3 const v_5 = float2x3(v_4, float3(v_3[1u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 2> const v_6 = (*from)[2u];
  float3 const v_7 = float3(v_6[0u].packed);
  float2x3 const v_8 = float2x3(v_7, float3(v_6[1u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 2> const v_9 = (*from)[3u];
  float3 const v_10 = float3(v_9[0u].packed);
  return tint_array<float2x3, 4>{v_2, v_5, v_8, float2x3(v_10, float3(v_9[1u].packed))};
}

kernel void f(const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 2>, 4>* u [[buffer(0)]], device float* s [[buffer(1)]]) {
  thread tint_array<float2x3, 4> p = {};
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s, .p=(&p)};
  (*tint_module_vars.p) = tint_load_array_packed_vec3(tint_module_vars.u);
  tint_array<tint_packed_vec3_f32_array_element, 2> const v_11 = (*tint_module_vars.u)[2];
  float3 const v_12 = float3(v_11[0u].packed);
  (*tint_module_vars.p)[1] = float2x3(v_12, float3(v_11[1u].packed));
  (*tint_module_vars.p)[1][0] = float3((*tint_module_vars.u)[0][1].packed).zxy;
  (*tint_module_vars.p)[1][0][0u] = (*tint_module_vars.u)[0][1].packed[0u];
  (*tint_module_vars.s) = (*tint_module_vars.p)[1][0][0u];
}
