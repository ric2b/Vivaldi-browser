#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f16_array_element {
  /* 0x0000 */ packed_half3 packed;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_array<tint_packed_vec3_f16_array_element, 4>, 4>* u;
  device half* s;
  thread tint_array<half4x3, 4>* p;
};

tint_array<half4x3, 4> tint_load_array_packed_vec3(const constant tint_array<tint_array<tint_packed_vec3_f16_array_element, 4>, 4>* const from) {
  tint_array<tint_packed_vec3_f16_array_element, 4> const v = (*from)[0u];
  half3 const v_1 = half3(v[0u].packed);
  half3 const v_2 = half3(v[1u].packed);
  half3 const v_3 = half3(v[2u].packed);
  half4x3 const v_4 = half4x3(v_1, v_2, v_3, half3(v[3u].packed));
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_5 = (*from)[1u];
  half3 const v_6 = half3(v_5[0u].packed);
  half3 const v_7 = half3(v_5[1u].packed);
  half3 const v_8 = half3(v_5[2u].packed);
  half4x3 const v_9 = half4x3(v_6, v_7, v_8, half3(v_5[3u].packed));
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_10 = (*from)[2u];
  half3 const v_11 = half3(v_10[0u].packed);
  half3 const v_12 = half3(v_10[1u].packed);
  half3 const v_13 = half3(v_10[2u].packed);
  half4x3 const v_14 = half4x3(v_11, v_12, v_13, half3(v_10[3u].packed));
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_15 = (*from)[3u];
  half3 const v_16 = half3(v_15[0u].packed);
  half3 const v_17 = half3(v_15[1u].packed);
  half3 const v_18 = half3(v_15[2u].packed);
  return tint_array<half4x3, 4>{v_4, v_9, v_14, half4x3(v_16, v_17, v_18, half3(v_15[3u].packed))};
}

kernel void f(const constant tint_array<tint_array<tint_packed_vec3_f16_array_element, 4>, 4>* u [[buffer(0)]], device half* s [[buffer(1)]]) {
  thread tint_array<half4x3, 4> p = {};
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s, .p=(&p)};
  (*tint_module_vars.p) = tint_load_array_packed_vec3(tint_module_vars.u);
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_19 = (*tint_module_vars.u)[2];
  half3 const v_20 = half3(v_19[0u].packed);
  half3 const v_21 = half3(v_19[1u].packed);
  half3 const v_22 = half3(v_19[2u].packed);
  (*tint_module_vars.p)[1] = half4x3(v_20, v_21, v_22, half3(v_19[3u].packed));
  (*tint_module_vars.p)[1][0] = half3((*tint_module_vars.u)[0][1].packed).zxy;
  (*tint_module_vars.p)[1][0][0u] = (*tint_module_vars.u)[0][1].packed[0u];
  (*tint_module_vars.s) = (*tint_module_vars.p)[1][0][0u];
}
