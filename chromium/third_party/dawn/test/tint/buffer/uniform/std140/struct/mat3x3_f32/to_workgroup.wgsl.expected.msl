#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  {volatile bool VOLATILE_NAME = false; if (VOLATILE_NAME) break;}

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 elements;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct S_tint_packed_vec3 {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad_1;
  /* 0x0010 */ tint_array<tint_packed_vec3_f32_array_element, 3> m;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_2;
};

tint_array<tint_packed_vec3_f32_array_element, 3> tint_pack_vec3_in_composite(float3x3 in) {
  tint_array<tint_packed_vec3_f32_array_element, 3> result = tint_array<tint_packed_vec3_f32_array_element, 3>{tint_packed_vec3_f32_array_element{.elements=packed_float3(in[0])}, tint_packed_vec3_f32_array_element{.elements=packed_float3(in[1])}, tint_packed_vec3_f32_array_element{.elements=packed_float3(in[2])}};
  return result;
}

struct S {
  int before;
  float3x3 m;
  int after;
};

S_tint_packed_vec3 tint_pack_vec3_in_composite_1(S in) {
  S_tint_packed_vec3 result = {};
  result.before = in.before;
  result.m = tint_pack_vec3_in_composite(in.m);
  result.after = in.after;
  return result;
}

void tint_zero_workgroup_memory(uint local_idx, threadgroup tint_array<S_tint_packed_vec3, 4>* const tint_symbol_1) {
  for(uint idx = local_idx; (idx < 4u); idx = (idx + 1u)) {
    TINT_ISOLATE_UB(tint_volatile_false);
    uint const i = idx;
    S const tint_symbol = S{};
    (*(tint_symbol_1))[i] = tint_pack_vec3_in_composite_1(tint_symbol);
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
}

void f_inner(uint local_invocation_index, threadgroup tint_array<S_tint_packed_vec3, 4>* const tint_symbol_2, const constant tint_array<S_tint_packed_vec3, 4>* const tint_symbol_3) {
  tint_zero_workgroup_memory(local_invocation_index, tint_symbol_2);
  *(tint_symbol_2) = *(tint_symbol_3);
  (*(tint_symbol_2))[1] = (*(tint_symbol_3))[2];
  (*(tint_symbol_2))[3].m = (*(tint_symbol_3))[2].m;
  (*(tint_symbol_2))[1].m[0].elements = packed_float3(float3((*(tint_symbol_3))[0].m[1].elements).zxy);
}

kernel void f(const constant tint_array<S_tint_packed_vec3, 4>* tint_symbol_5 [[buffer(0)]], uint local_invocation_index [[thread_index_in_threadgroup]]) {
  threadgroup tint_array<S_tint_packed_vec3, 4> tint_symbol_4;
  f_inner(local_invocation_index, &(tint_symbol_4), tint_symbol_5);
  return;
}

