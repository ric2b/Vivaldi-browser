#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct S {
  int before;
  float2x3 m;
  int after;
};

struct tint_module_vars_struct {
  const constant tint_array<S, 4>* u;
};

void a(tint_array<S, 4> a_1) {
}

void b(S s) {
}

void c(float2x3 m) {
}

void d(float3 v) {
}

void e(float f) {
}

kernel void f(const constant tint_array<S, 4>* u [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u};
  a((*tint_module_vars.u));
  b((*tint_module_vars.u)[2]);
  c((*tint_module_vars.u)[2].m);
  d((*tint_module_vars.u)[0].m[1].zxy);
  e((*tint_module_vars.u)[0].m[1].zxy[0u]);
}
