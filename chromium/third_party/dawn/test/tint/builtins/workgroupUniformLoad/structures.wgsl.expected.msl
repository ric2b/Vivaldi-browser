#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  packed_float3 elements;
};

struct Inner_tint_packed_vec3 {
  bool b;
  int4 v;
  tint_array<tint_packed_vec3_f32_array_element, 3> m;
};

struct Outer_tint_packed_vec3 {
  tint_array<Inner_tint_packed_vec3, 4> a;
};

float3x3 tint_unpack_vec3_in_composite(tint_array<tint_packed_vec3_f32_array_element, 3> in) {
  float3x3 result = float3x3(float3(in[0].elements), float3(in[1].elements), float3(in[2].elements));
  return result;
}

struct Inner {
  bool b;
  int4 v;
  float3x3 m;
};

Inner tint_unpack_vec3_in_composite_1(Inner_tint_packed_vec3 in) {
  Inner result = {};
  result.b = in.b;
  result.v = in.v;
  result.m = tint_unpack_vec3_in_composite(in.m);
  return result;
}

tint_array<Inner, 4> tint_unpack_vec3_in_composite_2(tint_array<Inner_tint_packed_vec3, 4> in) {
  tint_array<Inner, 4> result = tint_array<Inner, 4>{tint_unpack_vec3_in_composite_1(in[0]), tint_unpack_vec3_in_composite_1(in[1]), tint_unpack_vec3_in_composite_1(in[2]), tint_unpack_vec3_in_composite_1(in[3])};
  return result;
}

struct Outer {
  tint_array<Inner, 4> a;
};

Outer tint_unpack_vec3_in_composite_3(Outer_tint_packed_vec3 in) {
  Outer result = {};
  result.a = tint_unpack_vec3_in_composite_2(in.a);
  return result;
}

Outer tint_workgroupUniformLoad(threadgroup Outer_tint_packed_vec3* const p) {
  threadgroup_barrier(mem_flags::mem_threadgroup);
  Outer const result = tint_unpack_vec3_in_composite_3(*(p));
  threadgroup_barrier(mem_flags::mem_threadgroup);
  return result;
}

Outer foo(threadgroup Outer_tint_packed_vec3* const tint_symbol) {
  return tint_workgroupUniformLoad(tint_symbol);
}

