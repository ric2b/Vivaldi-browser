#include <metal_stdlib>
using namespace metal;

struct tint_module_vars_struct {
  device uint4* prevent_dce;
  texturecube_array<uint, access::sample> arg_1;
  sampler arg_2;
};

struct VertexOutput {
  float4 pos;
  uint4 prevent_dce;
};

struct vertex_main_outputs {
  float4 VertexOutput_pos [[position]];
  uint4 VertexOutput_prevent_dce [[user(locn0)]] [[flat]];
};

uint4 textureGather_d4b5c6(tint_module_vars_struct tint_module_vars) {
  uint4 res = tint_module_vars.arg_1.gather(tint_module_vars.arg_2, float3(1.0f), 1, component::y);
  return res;
}

fragment void fragment_main(device uint4* prevent_dce [[buffer(0)]], texturecube_array<uint, access::sample> arg_1 [[texture(0)]], sampler arg_2 [[sampler(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.prevent_dce=prevent_dce, .arg_1=arg_1, .arg_2=arg_2};
  (*tint_module_vars.prevent_dce) = textureGather_d4b5c6(tint_module_vars);
}

kernel void compute_main(device uint4* prevent_dce [[buffer(0)]], texturecube_array<uint, access::sample> arg_1 [[texture(0)]], sampler arg_2 [[sampler(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.prevent_dce=prevent_dce, .arg_1=arg_1, .arg_2=arg_2};
  (*tint_module_vars.prevent_dce) = textureGather_d4b5c6(tint_module_vars);
}

VertexOutput vertex_main_inner(tint_module_vars_struct tint_module_vars) {
  VertexOutput out = {};
  out.pos = float4(0.0f);
  out.prevent_dce = textureGather_d4b5c6(tint_module_vars);
  return out;
}

vertex vertex_main_outputs vertex_main(texturecube_array<uint, access::sample> arg_1 [[texture(0)]], sampler arg_2 [[sampler(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.arg_1=arg_1, .arg_2=arg_2};
  VertexOutput const v = vertex_main_inner(tint_module_vars);
  return vertex_main_outputs{.VertexOutput_pos=v.pos, .VertexOutput_prevent_dce=v.prevent_dce};
}
