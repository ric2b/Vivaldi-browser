#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct VertexOutputs {
  tint_array<float, 5> clipDistance;
  float4 position;
};

struct tint_symbol_outputs {
  float VertexOutputs_clipDistance [[clip_distance]] [5];
  float4 VertexOutputs_position [[position]];
};

VertexOutputs tint_symbol_inner() {
  return VertexOutputs{.clipDistance=tint_array<float, 5>{}, .position=float4(1.0f, 2.0f, 3.0f, 4.0f)};
}

vertex tint_symbol_outputs tint_symbol() {
  VertexOutputs const v = tint_symbol_inner();
  tint_symbol_outputs tint_wrapper_result = {};
  tint_wrapper_result.VertexOutputs_clipDistance[0u] = v.clipDistance[0u];
  tint_wrapper_result.VertexOutputs_clipDistance[1u] = v.clipDistance[1u];
  tint_wrapper_result.VertexOutputs_clipDistance[2u] = v.clipDistance[2u];
  tint_wrapper_result.VertexOutputs_clipDistance[3u] = v.clipDistance[3u];
  tint_wrapper_result.VertexOutputs_clipDistance[4u] = v.clipDistance[4u];
  tint_wrapper_result.VertexOutputs_position = v.position;
  return tint_wrapper_result;
}
