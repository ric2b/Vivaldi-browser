#include <metal_stdlib>
using namespace metal;

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  volatile bool VOLATILE_NAME = true; \
  if (VOLATILE_NAME)

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_module_vars_struct {
  device tint_array<uint, 1>* buf;
};

int g() {
  return 0;
}

int f() {
  {
    TINT_ISOLATE_UB(tint_volatile_true) while(true) {
      g();
      break;
    }
  }
  int const o = g();
  return 0;
}

kernel void tint_symbol(device tint_array<uint, 1>* buf [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.buf=buf};
  {
    TINT_ISOLATE_UB(tint_volatile_true_1) while(true) {
      if (((*tint_module_vars.buf)[0] == 0u)) {
        break;
      }
      int s = f();
      (*tint_module_vars.buf)[0] = 0u;
      {
      }
      continue;
    }
  }
}
