#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct strided_arr {
  float el;
};

struct LeftOver {
  float4x4 worldViewProjection;
  float time;
  tint_array<float4x4, 2> test2;
  tint_array<strided_arr, 4> test;
};

struct tint_module_vars_struct {
  thread float3* position_1;
  const constant LeftOver* x_14;
  thread float2* vUV;
  thread float2* uv;
  thread float3* normal;
  thread float4* gl_Position;
};

struct main_out {
  float4 gl_Position;
  float2 vUV_1;
};

struct tint_symbol_outputs {
  float4 main_out_gl_Position [[position]];
  float2 main_out_vUV_1 [[user(locn0)]];
};

struct tint_symbol_inputs {
  float3 position_1_param [[attribute(0)]];
  float2 uv_param [[attribute(2)]];
  float3 normal_param [[attribute(1)]];
};

void main_1(tint_module_vars_struct tint_module_vars) {
  float4 q = 0.0f;
  float3 p = 0.0f;
  q = float4((*tint_module_vars.position_1)[0u], (*tint_module_vars.position_1)[1u], (*tint_module_vars.position_1)[2u], 1.0f);
  p = q.xyz;
  float const v = p[0u];
  p[0u] = (v + sin((((*tint_module_vars.x_14).test[0].el * (*tint_module_vars.position_1)[1u]) + (*tint_module_vars.x_14).time)));
  float const v_1 = p[1u];
  p[1u] = (v_1 + sin(((*tint_module_vars.x_14).time + 4.0f)));
  float4x4 const v_2 = (*tint_module_vars.x_14).worldViewProjection;
  (*tint_module_vars.gl_Position) = (v_2 * float4(p[0u], p[1u], p[2u], 1.0f));
  (*tint_module_vars.vUV) = (*tint_module_vars.uv);
  (*tint_module_vars.gl_Position)[1u] = ((*tint_module_vars.gl_Position)[1u] * -1.0f);
}

main_out tint_symbol_inner(float3 position_1_param, float2 uv_param, float3 normal_param, tint_module_vars_struct tint_module_vars) {
  (*tint_module_vars.position_1) = position_1_param;
  (*tint_module_vars.uv) = uv_param;
  (*tint_module_vars.normal) = normal_param;
  main_1(tint_module_vars);
  return main_out{.gl_Position=(*tint_module_vars.gl_Position), .vUV_1=(*tint_module_vars.vUV)};
}

vertex tint_symbol_outputs tint_symbol(tint_symbol_inputs inputs [[stage_in]], const constant LeftOver* x_14 [[buffer(0)]]) {
  thread float3 position_1 = 0.0f;
  thread float2 vUV = 0.0f;
  thread float2 uv = 0.0f;
  thread float3 normal = 0.0f;
  thread float4 gl_Position = 0.0f;
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.position_1=(&position_1), .x_14=x_14, .vUV=(&vUV), .uv=(&uv), .normal=(&normal), .gl_Position=(&gl_Position)};
  main_out const v_3 = tint_symbol_inner(inputs.position_1_param, inputs.uv_param, inputs.normal_param, tint_module_vars);
  return tint_symbol_outputs{.main_out_gl_Position=v_3.gl_Position, .main_out_vUV_1=v_3.vUV_1};
}
