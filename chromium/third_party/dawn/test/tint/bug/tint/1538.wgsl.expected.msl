#include <metal_stdlib>

using namespace metal;

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  {volatile bool VOLATILE_NAME = false; if (VOLATILE_NAME) break;}

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

int g() {
  return 0;
}

int f() {
  while(true) {
    TINT_ISOLATE_UB(tint_volatile_false);
    g();
    break;
  }
  int const o = g();
  return 0;
}

kernel void tint_symbol(device tint_array<uint, 1>* tint_symbol_1 [[buffer(0)]]) {
  while(true) {
    TINT_ISOLATE_UB(tint_volatile_false_1);
    if (((*(tint_symbol_1))[0] == 0u)) {
      break;
    }
    int s = f();
    (*(tint_symbol_1))[0] = 0u;
  }
  return;
}

