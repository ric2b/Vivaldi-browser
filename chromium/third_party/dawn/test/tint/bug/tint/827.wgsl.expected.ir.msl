#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Result {
  /* 0x0000 */ tint_array<float, 1> values;
};

struct tint_module_vars_struct {
  depth2d<float, access::sample> tex;
  device Result* result;
};

void tint_symbol_inner(uint3 GlobalInvocationId, tint_module_vars_struct tint_module_vars) {
  int const v = int(GlobalInvocationId[0u]);
  (*tint_module_vars.result).values[((GlobalInvocationId[1u] * 128u) + GlobalInvocationId[0u])] = tint_module_vars.tex.read(uint2(int2(v, int(GlobalInvocationId[1u]))), 0);
}

kernel void tint_symbol(uint3 GlobalInvocationId [[thread_position_in_grid]], depth2d<float, access::sample> tex [[texture(0)]], device Result* result [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.tex=tex, .result=result};
  tint_symbol_inner(GlobalInvocationId, tint_module_vars);
}
