#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Matrix {
  tint_array<uint, 1> numbers;
};

struct Uniforms {
  uint2 aShape;
  uint2 bShape;
  uint2 outShape;
};

struct tint_module_vars_struct {
  const device Matrix* firstMatrix;
  const device Matrix* secondMatrix;
  device Matrix* resultMatrix;
  const constant Uniforms* uniforms;
};

void tint_symbol_inner(uint3 global_id, tint_module_vars_struct tint_module_vars) {
  uint2 const resultCell = uint2(global_id[1u], global_id[0u]);
  uint const dimInner = (*tint_module_vars.uniforms).aShape[1u];
  uint const dimOutter = (*tint_module_vars.uniforms).outShape[1u];
  uint result = 0u;
  {
    uint i = 0u;
    while(true) {
      if ((i < dimInner)) {
      } else {
        break;
      }
      uint const a = (i + (resultCell[0u] * dimInner));
      uint const b = (resultCell[1u] + (i * dimOutter));
      result = (result + ((*tint_module_vars.firstMatrix).numbers[a] * (*tint_module_vars.secondMatrix).numbers[b]));
      {
        i = (i + 1u);
      }
      continue;
    }
  }
  uint const index = (resultCell[1u] + (resultCell[0u] * dimOutter));
  (*tint_module_vars.resultMatrix).numbers[index] = result;
}

kernel void tint_symbol(uint3 global_id [[thread_position_in_grid]], const device Matrix* firstMatrix [[buffer(2)]], const device Matrix* secondMatrix [[buffer(3)]], device Matrix* resultMatrix [[buffer(1)]], const constant Uniforms* uniforms [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.firstMatrix=firstMatrix, .secondMatrix=secondMatrix, .resultMatrix=resultMatrix, .uniforms=uniforms};
  tint_symbol_inner(global_id, tint_module_vars);
}
