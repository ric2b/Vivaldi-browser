#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Particle {
  tint_array<float3, 8> position;
  float lifetime;
  float4 color;
  float3 velocity;
};

struct Particles {
  tint_array<Particle, 1> p;
};

struct Simulation {
  uint i;
};

struct tint_module_vars_struct {
  const device Particles* particles;
  const constant Simulation* sim;
};

kernel void tint_symbol(const device Particles* particles [[buffer(1)]], const constant Simulation* sim [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.particles=particles, .sim=sim};
  Particle particle = (*tint_module_vars.particles).p[0];
  particle.position[(*tint_module_vars.sim).i] = particle.position[(*tint_module_vars.sim).i];
}
