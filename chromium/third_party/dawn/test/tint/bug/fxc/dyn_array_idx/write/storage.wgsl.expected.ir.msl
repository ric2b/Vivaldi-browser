#include <metal_stdlib>
using namespace metal;

struct UBO {
  int dynamic_idx;
};

struct Result {
  int out;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct SSBO {
  tint_array<int, 4> data;
};

struct tint_module_vars_struct {
  const constant UBO* ubo;
  device Result* result;
  device SSBO* ssbo;
};

kernel void f(const constant UBO* ubo [[buffer(0)]], device Result* result [[buffer(2)]], device SSBO* ssbo [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.ubo=ubo, .result=result, .ssbo=ssbo};
  (*tint_module_vars.ssbo).data[(*tint_module_vars.ubo).dynamic_idx] = 1;
  (*tint_module_vars.result).out = (*tint_module_vars.ssbo).data[3];
}
