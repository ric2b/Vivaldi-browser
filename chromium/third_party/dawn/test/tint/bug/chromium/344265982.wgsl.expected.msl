#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  volatile bool VOLATILE_NAME = true; \
  if (VOLATILE_NAME)

void foo(device tint_array<int, 4>* const arg) {
  bool tint_continue = false;
  TINT_ISOLATE_UB(tint_volatile_true) for(int i = 0; (i < 4); i = as_type<int>((as_type<uint>(i) + as_type<uint>(1)))) {
    tint_continue = false;
    switch((*(arg))[i]) {
      case 1: {
        tint_continue = true;
        break;
      }
      default: {
        (*(arg))[i] = 2;
        break;
      }
    }
    if (tint_continue) {
      continue;
    }
  }
}

fragment void tint_symbol_1(device tint_array<int, 4>* tint_symbol_2 [[buffer(0)]]) {
  foo(tint_symbol_2);
  return;
}

