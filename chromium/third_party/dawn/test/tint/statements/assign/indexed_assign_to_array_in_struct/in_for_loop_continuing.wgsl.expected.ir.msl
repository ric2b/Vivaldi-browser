#include <metal_stdlib>
using namespace metal;

struct Uniforms {
  /* 0x0000 */ uint i;
};

struct tint_module_vars_struct {
  const constant Uniforms* uniforms;
};

struct InnerS {
  int v;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct OuterS {
  tint_array<InnerS, 8> a1;
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  volatile bool VOLATILE_NAME = true; \
  if (VOLATILE_NAME)

kernel void tint_symbol(const constant Uniforms* uniforms [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.uniforms=uniforms};
  InnerS v = {};
  OuterS s1 = {};
  {
    int i = 0;
    TINT_ISOLATE_UB(tint_volatile_true) while(true) {
      if ((i < 4)) {
      } else {
        break;
      }
      i = as_type<int>((as_type<uint>(i) + as_type<uint>(1)));
      {
        s1.a1[(*tint_module_vars.uniforms).i] = v;
      }
      continue;
    }
  }
}
