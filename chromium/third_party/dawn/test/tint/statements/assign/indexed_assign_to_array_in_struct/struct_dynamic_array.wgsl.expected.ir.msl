#include <metal_stdlib>
using namespace metal;

struct Uniforms {
  /* 0x0000 */ uint i;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct InnerS {
  /* 0x0000 */ int v;
};

struct OuterS {
  /* 0x0000 */ tint_array<InnerS, 1> a1;
};

struct tint_module_vars_struct {
  const constant Uniforms* uniforms;
  device OuterS* s1;
};

kernel void tint_symbol(const constant Uniforms* uniforms [[buffer(0)]], device OuterS* s1 [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.uniforms=uniforms, .s1=s1};
  InnerS v = {};
  (*tint_module_vars.s1).a1[(*tint_module_vars.uniforms).i] = v;
}
