#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

#define TINT_ISOLATE_UB(VOLATILE_NAME) \
  {volatile bool VOLATILE_NAME = false; if (VOLATILE_NAME) break;}

struct Uniforms {
  /* 0x0000 */ uint i;
};

struct InnerS {
  int v;
};

struct OuterS {
  tint_array<InnerS, 8> a1;
};

kernel void tint_symbol(const constant Uniforms* tint_symbol_1 [[buffer(0)]]) {
  InnerS v = {};
  OuterS s1 = {};
  int i = 0;
  for(s1.a1[(*(tint_symbol_1)).i] = v; (i < 4); i = as_type<int>((as_type<uint>(i) + as_type<uint>(1)))) {
    TINT_ISOLATE_UB(tint_volatile_false);
  }
  return;
}

