# Copyright 2014 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  # Path to Visual Studio. If empty, the default is used which is to use the
  # automatic toolchain in depot_tools. If set, you must also set the
  # visual_studio_version, wdk_path and windows_sdk_version.
  visual_studio_path = ""

  # Version of Visual Studio pointed to by the visual_studio_path.
  visual_studio_version = ""

  # Directory of the Windows driver kit. If visual_studio_path is empty, this
  # will be auto-filled.
  wdk_path = ""

  # Full path to the Windows SDK, not including a backslash at the end.
  # This value is the default location, override if you have a different
  # installation location.
  windows_sdk_path = "C:\Program Files (x86)\Windows Kits\10"

  # Version of the Windows SDK pointed to by the windows_sdk_path.
  windows_sdk_version = ""

  # Absolute label location of JSON file (e.g. //build/toolchain.json)
  # specifying the managed toolchain to be used.
  # Setting this enables the managed toolchain system and its value is
  # forwarded to the vs_toolchain and setup_toolchain scripts
  #
  # The JSON file have to be on the following fields:
  # {
  #   "hash": "<name hash of toolchain zip>",
  #   "url": "<URL prefix of toolchain download location>"
  # }
  #
  # This can be used instead of the environment variables
  # DEPOT_TOOLS_WIN_TOOLCHAIN, DEPOT_TOOLS_WIN_TOOLCHAIN_BASE_URL, and
  # GYP_MSVS_HASH_<hash>
  #
  # Additionally, the "win_toolchain" hooks entry in src/DEPS need to be
  # updated with the path to the file provided as a --toolchain-json argument.
  #
  # The standard content of the win_toochain DEPS hooks entry is
  #
  # {
  #   # Update the Windows toolchain if necessary.  Must run before 'clang' below.
  #   'name': 'win_toolchain',
  #   'pattern': '.',
  #   'condition': 'checkout_win',
  #   'action': ['python', 'src/build/vs_toolchain.py', 'update', '--force'],
  # },
  #
  # To enable download and installation of the managed toolchain change the
  # action entry by adding a --toolchain-json argument to specify the JSON
  # file, e.g. src/build/toolchain.json (relative to the work dir of hooks)
  # *before* the "update" command argument.
  #
  #   ['python', 'src/build/vs_toolchain.py',
  #    '--toolchain-json', 'src/build/toolchain.json',
  #    'update', '--force']
  #
  # This update will then be run when running gclient runhooks (or sync).
  #
  # When the hash entry of the JSON is changed, gclient runhooks have to be
  # run again.
  #
  # The name hash in the JSON is generated by the packaging script
  # //third_party/depot_tools/win_toolchain/package_from_installed.py
  toolchain_json_spec_file=""
}

vs_toolchain_args = []
if (toolchain_json_spec_file != "") {
  vs_toolchain_args += [
    "--toolchain-json", rebase_path(toolchain_json_spec_file, root_build_dir),
  ]
}

if (visual_studio_path == "") {
  toolchain_data =
      exec_script("../../vs_toolchain.py", vs_toolchain_args + [ "get_toolchain_dir" ], "scope")
  visual_studio_path = toolchain_data.vs_path
  windows_sdk_version = toolchain_data.sdk_version
  windows_sdk_path = toolchain_data.sdk_path
  visual_studio_version = toolchain_data.vs_version
  wdk_path = toolchain_data.wdk_dir
  visual_studio_runtime_dirs = toolchain_data.runtime_dirs
} else {
  assert(visual_studio_version != "",
         "You must set the visual_studio_version if you set the path")
  assert(windows_sdk_version != "",
         "You must set the windows_sdk_version if you set the path")
  assert(wdk_path != "",
         "You must set the wdk_path if you set the visual studio path")
  visual_studio_runtime_dirs = []
}

visual_studio_version_logs = [ "windows_sdk_version=${windows_sdk_version}" ]
