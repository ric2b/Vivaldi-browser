import ("//vivaldi/testing/testing.gni")
import ("//vivaldi/gn/config/features.gni")
import ("//build/config/ui.gni")

update_target("//chrome/browser:browser") {
  sources += [
    "//vivaldi/browser/menus/vivaldi_menu_enums.h",
    "//vivaldi/browser/shell_integration/vivaldi_shell_integration.h",
    "//vivaldi/browser/vivaldi_permission_context_base.cc",
    "//vivaldi/browser/vivaldi_profile_impl.cc",
    "//vivaldi/browser/vivaldi_profile_impl.h",
    "//vivaldi/browser/sessions/vivaldi_chrome_tab_service_client.cc",
  ]
  if (is_win) {
    sources += [
      "//vivaldi/browser/shell_integration/vivaldi_shell_integration_win.cc",
    ]

    # With Vivaldi we do not use registry to communicate the update version,
    # so use a directory-based watcher on Windows instead.
    sources -= [
      "upgrade_detector/registry_monitor.cc",
      "upgrade_detector/registry_monitor.h",
    ]
    sources += [
      "upgrade_detector/directory_monitor.cc",
      "upgrade_detector/directory_monitor.h",
    ]
  }
  if (is_linux) {
    sources += [
      "//vivaldi/browser/shell_integration/vivaldi_shell_integration_linux.cc",
    ]
  }
  if (is_mac && !vivaldi_disable_sparkle) {
    sources += [
      "//vivaldi/autoupdate/mac/sparkle_updater_delegate.h",
      "//vivaldi/autoupdate/mac/sparkle_updater_delegate.mm",
    ]
  }
  if (is_mac) {
    sources += [
      "//vivaldi/browser/mac/mac_utils.h",
      "//vivaldi/browser/mac/mac_utils.mm",
      "//vivaldi/browser/mac/vivaldi_main_menu_builder.h",
      "//vivaldi/browser/mac/vivaldi_main_menu_builder.mm",
      "//vivaldi/browser/shell_integration/vivaldi_shell_integration_mac.mm",
    ]
  }
  if (!is_android) {
    sources += [
      "//vivaldi/browser/menus/bookmark_sorter.cc",
      "//vivaldi/browser/menus/bookmark_sorter.h",
      "//vivaldi/browser/menus/bookmark_support.cc",
      "//vivaldi/browser/menus/bookmark_support.h",
      "//vivaldi/browser/vivaldi_render_view_context_menu.cc",
      "//vivaldi/browser/sessions/vivaldi_session_service.cc",
      "//vivaldi/browser/sessions/vivaldi_session_service.h",
      "//vivaldi/browser/sessions/vivaldi_session_utils.cc",
      "//vivaldi/browser/sessions/vivaldi_session_utils.h",
      "//vivaldi/browser/sessions/page_actions_session_helper.cc",
      "//vivaldi/browser/sessions/page_actions_session_helper.h",
    ]
  }
  if (is_android) {
    sources += [
      "//vivaldi/browser/android/first_run_android.cc",
      "//vivaldi/browser/android/vivaldi_tab_android.cc",
      "//vivaldi/browser/android/adblock/adblock_manager.h",
      "//vivaldi/browser/android/adblock/adblock_manager.cc",
      "//vivaldi/browser/android/capture/capture_handler.cpp",
      "//vivaldi/browser/android/capture/capture_handler.h",
      "//vivaldi/browser/android/capture/capture_thumbnail_handler.cpp",
      "//vivaldi/browser/android/capture/capture_thumbnail_handler.h",
      "//vivaldi/browser/android/prefs/vivaldi_preferences_bridge.h",
      "//vivaldi/browser/android/prefs/vivaldi_preferences_bridge.cc",
      "//vivaldi/browser/android/prefs/vivaldi_relaunch_utils.cc",
      # TODO CHR 124: Check if we can only use the Chromium implementation for the future.
      #"//vivaldi/browser/android/autofill/autofill_provider_android.cc",
      #"//vivaldi/browser/android/autofill/autofill_provider_android.h",
      #"//vivaldi/browser/android/autofill/form_data_android.cc",
      #"//vivaldi/browser/android/autofill/form_data_android.h",
      #"//vivaldi/browser/android/autofill/form_field_data_android.cc",
      #"//vivaldi/browser/android/autofill/form_field_data_android.h",
      #"//vivaldi/browser/android/autofill/autofill_provider.h",
      #"//vivaldi/browser/android/autofill/autofill_provider.cc",
      #"//vivaldi/browser/android/autofill/android_autofill_manager.h",
      #"//vivaldi/browser/android/autofill/android_autofill_manager.cc",
      #"//vivaldi/browser/android/autofill/android_autofill_features.h",
      #"//vivaldi/browser/android/autofill/android_autofill_features.cc",
      #"//vivaldi/browser/android/autofill/autofill_provider_android_bridge.h",
      #"//vivaldi/browser/android/autofill/autofill_provider_android_bridge_impl.h",
      #"//vivaldi/browser/android/autofill/autofill_provider_android_bridge_impl.cc",
      #"//vivaldi/browser/android/autofill/form_data_android_bridge.h",
      #"//vivaldi/browser/android/autofill/form_data_android_bridge_impl.h",
      #"//vivaldi/browser/android/autofill/form_data_android_bridge_impl.cc",
      #"//vivaldi/browser/android/autofill/form_field_data_android_bridge.h",
      #"//vivaldi/browser/android/autofill/form_field_data_android_bridge_impl.h",
      #"//vivaldi/browser/android/autofill/form_field_data_android_bridge_impl.cc",
      #"//vivaldi/browser/android/autofill/android_autofill_bridge_factory.h",
      #"//vivaldi/browser/android/autofill/android_autofill_bridge_factory.cc",
      "//vivaldi/browser/android/translate/vivaldi_translate_bridge.h",
      "//vivaldi/browser/android/translate/vivaldi_translate_bridge.cc",
    ]
  }
}

update_target("//chrome/browser/ui:ui") {
  sources += [
    "//vivaldi/components/bookmarks/bookmark_thumbnail_theme_tab_helper.cc",
    "//vivaldi/components/bookmarks/bookmark_thumbnail_theme_tab_helper.h",
    "//vivaldi/browser/ui/vivaldi_browser_navigator.cc",
    "//vivaldi/browser/ui/vivaldi_browser_navigator.h",
    "//vivaldi/browser/launch_update_notifier.h",
    "//vivaldi/browser/startup_vivaldi_browser.cpp",
    "//vivaldi/browser/startup_vivaldi_browser.h",
    "//vivaldi/browser/ui/viv_tab_contents_synced_tab_delegate.cc",
    "//vivaldi/browser/ui/vivaldi_tab_helpers.cc",
    "//vivaldi/browser/ui/vivaldi_tab_helpers.h",
    "//vivaldi/browser/ui/vivaldi_window_sizer.cc",
  ]
  if (is_win) {
    sources += [
      "//vivaldi/browser/launch_update_notifier_win.cc",
    ]
  }
  if (is_posix) {
    sources += [
      "//vivaldi/browser/launch_update_notifier_posix.cc",
    ]
  }
  if (!is_android) {
    sources += [
      "//vivaldi/browser/ui/vivaldi_browser.cc",
      "//vivaldi/browser/ui/viv_settings_import_data_handler.cc",
      "//vivaldi/sync/vivaldi_browser_synced_window_delegate.cc",
      "//vivaldi/sync/vivaldi_browser_synced_window_delegate.h",
    ]
  }
  if (toolkit_views) {
    sources += [
      "//vivaldi/browser/ui/viv_page_info_bubble_view.cc",
    ]
  }
}

update_target("//chrome/common:constants") {
  if (is_win) {
    sources += [
      "//vivaldi/browser/win/vivaldi_utils.cc",
      "//vivaldi/browser/win/vivaldi_utils.h",
    ]
    deps += [
      "//chrome/installer/util:constants",
    ]
  }
}

update_target("//content/public/browser:browser_sources") {
  sources += [
    "//vivaldi/browser/renderer_host/devtools/protocol/vivaldi_emulation_handler.cc",
    "//vivaldi/browser/vivaldi_child_process_flags.cc",
    "//vivaldi/browser/vivaldi_child_process_flags.h",
  ]
  if (!is_android) {
    sources += [
      "//vivaldi/browser/vivaldi_runtime_feature.cc",
      "//vivaldi/browser/vivaldi_runtime_feature.h",
    ]
    deps += [
      "//vivaldi/components/datasource:resource_reader",
      "//vivaldi/prefs:prefs_strings",
    ]
  }
}

if (!is_android) {
  if (vivaldi_build_tests) {
    update_target("//chrome/test:unit_tests") {
      sources += [
        "//vivaldi/browser/stats_reporter_unittest.cc",
        "//vivaldi/browser/translate/vivaldi_translate_server_request_unittests.cc"
      ]
      if (is_win) {
        sources -= [ "../browser/upgrade_detector/registry_monitor_unittest.cc" ]
      }
    }
  }

  update_template_instance("//chrome/browser/resources/settings:build") {
    web_component_files -= [
      "privacy_sandbox/privacy_sandbox_ad_measurement_subpage.ts",
      "privacy_sandbox/privacy_sandbox_fledge_subpage.ts",
      "privacy_sandbox/privacy_sandbox_interest_item.ts",
      "privacy_sandbox/privacy_sandbox_page.ts",
      "privacy_sandbox/privacy_sandbox_manage_topics_subpage.ts",
      "privacy_sandbox/privacy_sandbox_topics_subpage.ts",
    ]
  }
}
